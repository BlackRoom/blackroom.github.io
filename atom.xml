<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BLACKROOM]]></title>
  <link href="http://blog.blackroom.cn/atom.xml" rel="self"/>
  <link href="http://blog.blackroom.cn/"/>
  <updated>2015-01-22T17:06:28+08:00</updated>
  <id>http://blog.blackroom.cn/</id>
  <author>
    <name><![CDATA[BLACKROOM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Samba文件服务器配置]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/03/28/smba-wen-jian-fu-wu-qi/"/>
    <updated>2013-03-28T16:14:00+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/03/28/smba-wen-jian-fu-wu-qi</id>
    <content type="html"><![CDATA[<h2>一.Samba简介</h2>

<p>Samba是一个能让Linux系统应用Microsoft网络通讯协议的软件，而SMB是Server Message Block的缩写，即为服务器消息块 ，SMB主要是作为Microsoft的网络通讯协议，后来Samba将SMB通信协议应用到了Linux系统上，就形成了现在的Samba软件。后来微软又把 SMB 改名为 CIFS（Common Internet File System），即公共 Internet 文件系统，并且加入了许多新的功能，这样一来，使得Samba具有了更强大的功能。</p>

<p>Samba最大的功能就是可以用于Linux与windows系统直接的文件共享和打印共享，Samba既可以用于windows与Linux之间的文件共享，也可以用于Linux与Linux之间的资源共享，由于NFS(网络文件系统）可以很好的完成Linux与Linux之间的数据共享，因而 Samba较多的用在了Linux与windows之间的数据共享上面。</p>

<p>SMB是基于客户机/服务器型的协议，因而一台Samba服务器既可以充当文件共享服务器，也可以充当一个Samba的客户端，例如，一台在Linux 下已经架设好的Samba服务器，windows客户端就可以通过SMB协议共享Samba服务器上的资源文件，同时，Samba服务器也可以访问网络中 其它windows系统或者Linux系统共享出来的文件。</p>

<p>Samba在windows下使用的是NetBIOS协议，如果你要使用Linux下共享出来的文件，请确认你的windows系统下是否安装了NetBIOS协议。</p>

<p>组成Samba运行的有两个服务，一个是SMB，另一个是NMB；SMB是Samba 的核心启动服务，主要负责建立 Linux Samba服务器与Samba客户机之间的对话， 验证用户身份并提供对文件和打印系统的访问，只有SMB服务启动，才能实现文件的共享，监听139 TCP端口；而NMB服务是负责解析用的，类似与DNS实现的功能，NMB可以把Linux系统共享的工作组名称与其IP对应起来，如果NMB服务没有启动，就只能通过IP来访问共享文件，监听137和138 UDP端口。</p>

<p>Samba服务器可实现如下功能：WINS和DNS服务； 网络浏览服务； Linux和Windows域之间的认证和授权； UNICODE字符集和域名映射；满足CIFS协议的UNIX共享等。</p>

<h2>二.系统环境</h2>

<p>系统平台：CentOS 6.4  x86_64<br/>
Samba版本：samba-3.6.9-169.el6_5.x86_64<br/>
防火墙已关闭/iptables: Firewall is not running.
SELINUX=disabled</p>

<p>如果需要开启防火墙只需要打开<strong>TCP139端口和UDP137,138口端</strong></p>

<h2>三.安装Samba服务</h2>

<h4>1.如果联网的话可以使用yum工具安装方便快捷，如果未联网，则挂载系统光盘进行安装。</h4>

<pre><code># yum install samba samba-client samba-swat
</code></pre>

<p>使用yum如果有有依赖关系的包<strong>samba-common、samba-winbind-clients、libsmbclient</strong>将会自动安装上去。</p>

<h4>2.安装包说明</h4>

<pre><code>samba-common    主要提供samba服务器的设置文件与设置文件语法检验程序testparm
samba-client    客户端软件，主要提供linux主机作为客户端时，所需要的工具指令集
samba-swat  基于https协议的samba服务器web配置界面
samba   服务器端软件，主要提供samba服务器的守护程序，共享文档，日志的轮替，开机默认选项  
</code></pre>

<p>Samba服务器安装完毕，会生成配置文件目录<strong>/etc/samba</strong>和其它一些samba可执行命令工具，<strong>/etc/samba/smb.conf</strong>是samba的核心配置文件，<strong>/etc/init.d/smb</strong>是samba的启动|关闭文件。</p>

<h4>3.启动Samba服务器,查看samba的服务启动情况,设置开机自启动.</h4>

<p>可以通过<strong>/etc/init.d/smb (start|stop|restart)</strong>来启动、关闭、重启Samba服务<br/>
    # service smb start 启动samba服务
    # service smb status    查看samba的服务启动情况
    # chkconfig &ndash;level 35 smb on   在3、5级别上自动运行samba服务</p>

<h2>四.配置Samba服务</h2>

<pre><code>Samba的主配置文件为/etc/samba/smb.conf
</code></pre>

<p>主配置文件由两部分构成<br/>
<strong>Global Settings (55-245行)</strong><br/>
该设置都是与Samba服务整体运行环境有关的选项，它的设置项目是针对所有共享资源的。<br/>
<strong>Share Definitions (246-尾行)</strong><br/>
该设置针对的是共享目录个别的设置，只对当前的共享资源起作用。</p>

<p><strong>全局参数：Global Settings</strong></p>

<pre><code>[global]
config file = /usr/local/samba/lib/smb.conf.%m  
</code></pre>

<p>说明：config file可以让你使用另一个配置文件来覆盖缺省的配置文件。如果文件不存在，则该项无效。这个参数很有用，可以使得samba配置更灵活，可以让一台 samba服务器模拟多台不同配置的服务器。比如，你想让PC1（主机名）这台电脑在访问Samba Server时使用它自己的配置文件，那么先在/etc/samba/host/下为PC1配置一个名为smb.conf.pc1的文件，然后在 smb.conf中加入：config file = /etc/samba/host/smb.conf.%m。这样当PC1请求连接Samba Server时，smb.conf.%m就被替换成smb.conf.pc1。这样，对于PC1来说，它所使用的Samba服务就是由 smb.conf.pc1定义的，而其他机器访问Samba Server则还是应用smb.conf。</p>

<pre><code>workgroup = WORKGROUP  
</code></pre>

<p>说明：设定 Samba Server 所要加入的工作组或者域。</p>

<pre><code>server string = Samba Server Version %v  
</code></pre>

<p>说明：设定 Samba Server 的注释，可以是任何字符串，也可以不填。宏%v表示显示Samba的版本号。</p>

<pre><code>netbios name = smbserver  
</code></pre>

<p>说明：设置Samba Server的NetBIOS名称。如果不填，则默认会使用该服务器的DNS名称的第一部分。netbios name和workgroup名字不要设置成一样了。</p>

<pre><code>interfaces = lo eth0 192.168.12.2/24 192.168.13.2/24  
</code></pre>

<p>说明：设置Samba Server监听哪些网卡，可以写网卡名，也可以写该网卡的IP地址。</p>

<pre><code>hosts allow = 127. 192.168.1. 192.168.10.1  
</code></pre>

<p>说明：表示允许连接到Samba Server的客户端，多个参数以空格隔开。可以用一个IP表示，也可以用一个网段表示。hosts deny 与hosts allow 刚好相反。<br/>
例如：hosts allow=172.17.2.EXCEPT172.17.2.50<br/>
表示容许来自172.17.2.*的主机连接，但排除172.17.2.50<br/>
hosts allow=172.17.2.0/255.255.0.0<br/>
表示容许来自172.17.2.0/255.255.0.0子网中的所有主机连接</p>

<pre><code>hosts allow=M1，M2  
</code></pre>

<p>表示容许来自M1和M2两台计算机连接</p>

<pre><code>hosts allow=@pega  
</code></pre>

<p>表示容许来自pega网域的所有计算机连接</p>

<pre><code>max connections = 0  
</code></pre>

<p>说明：max connections用来指定连接Samba Server的最大连接数目。如果超出连接数目，则新的连接请求将被拒绝。0表示不限制。</p>

<pre><code>deadtime = 0  
</code></pre>

<p>说明：deadtime用来设置断掉一个没有打开任何文件的连接的时间。单位是分钟，0代表Samba Server不自动切断任何连接。</p>

<pre><code>time server = yes/no  
</code></pre>

<p>说明：time server用来设置让nmdb成为windows客户端的时间服务器。</p>

<pre><code>log file = /var/log/samba/log.%m  
</code></pre>

<p>说明：设置Samba Server日志文件的存储位置以及日志文件名称。在文件名后加个宏%m（主机名），表示对每台访问Samba Server的机器都单独记录一个日志文件。如果pc1、pc2访问过Samba Server，就会在/var/log/samba目录下留下log.pc1和log.pc2两个日志文件。</p>

<pre><code>max log size = 50  
</code></pre>

<p>说明：设置Samba Server日志文件的最大容量，单位为kB，0代表不限制。</p>

<pre><code>security = user  
</code></pre>

<p>说明：设置用户访问Samba Server的验证方式，一共有四种验证方式。<br/>
1. share：用户访问Samba Server不需要提供用户名和口令, 安全性能较低。<br/>
2. user：Samba Server共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。<br/>
3. server：依靠其他Windows NT/2000或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个NT系统上,使用 Windows NT进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。<br/>
4. domain：域安全级别,使用主域控制器(PDC)来完成认证。</p>

<pre><code>passdb backend = tdbsam  
</code></pre>

<p>说明：passdb backend就是用户后台的意思。目前有三种后台：smbpasswd、tdbsam和ldapsam。sam应该是security account manager（安全账户管理）的简写。<br/>
1.smbpasswd：该方式是使用smb自己的工具smbpasswd来给系统用户（真实用户或者虚拟用户）设置一个Samba密码，客户端就用这个密码来访问Samba的资源。smbpasswd文件默认在/etc/samba目录下，不过有时候要手工建立该文件。<br/>
2.tdbsam： 该方式则是使用一个数据库文件来建立用户数据库。数据库文件叫passdb.tdb，默认在/etc/samba目录下。passdb.tdb用户数据库 可以使用smbpasswd –a来建立Samba用户，不过要建立的Samba用户必须先是系统用户。我们也可以使用pdbedit命令来建立Samba账户。pdbedit命令的 参数很多，我们列出几个主要的。<br/>
　　pdbedit –a username：新建Samba账户。<br/>
　　pdbedit –x username：删除Samba账户。<br/>
　　pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。<br/>
　　pdbedit –Lv：列出Samba用户列表的详细信息。<br/>
　　pdbedit –c “[D]” –u username：暂停该Samba用户的账号。<br/>
　　pdbedit –c “[]” –u username：恢复该Samba用户的账号。<br/>
3.ldapsam：该方式则是基于LDAP的账户管理方式来验证用户。首先要建立LDAP服务，然后设置“passdb backend = ldapsam:ldap://LDAP Server”</p>

<pre><code>encrypt passwords = yes/no  
</code></pre>

<p>说明：是否将认证密码加密。因为现在windows操作系统都是使用加密密码，所以一般要开启此项。不过配置文件默认已开启。</p>

<pre><code>smb passwd file = /etc/samba/smbpasswd  
</code></pre>

<p>说明：用来定义samba用户的密码文件。smbpasswd文件如果没有那就要手工新建。</p>

<pre><code>username map = /etc/samba/smbusers  
</code></pre>

<p>说明：用来定义用户名映射，比如可以将root换成administrator、admin等。不过要事先在smbusers文件中定义好。比如：root = administrator admin，这样就可以用administrator或admin这两个用户来代替root登陆Samba Server，更贴近windows用户的习惯。</p>

<pre><code>guest account = nobody  
</code></pre>

<p>说明：用来设置guest用户名。</p>

<pre><code>socket options = TCP_NODELAY SO_RCVBUF=8192 SO_SNDBUF=8192  
</code></pre>

<p>说明：用来设置服务器和客户端之间会话的Socket选项，可以优化传输速度。
    domain master = yes/no</p>

<p>说明：设置Samba服务器是否要成为网域主浏览器，网域主浏览器可以管理跨子网域的浏览服务。
    local master = yes/no<br/>
说明：local master用来指定Samba Server是否试图成为本地网域主浏览器。如果设为no，则永远不会成为本地网域主浏览器。但是即使设置为yes，也不等于该Samba Server就能成为主浏览器，还需要参加选举。</p>

<pre><code>preferred master = yes/no  
</code></pre>

<p>说明：设置Samba Server一开机就强迫进行主浏览器选举，可以提高Samba Server成为本地网域主浏览器的机会。如果该参数指定为yes时，最好把domain master也指定为yes。使用该参数时要注意：如果在本Samba Server所在的子网有其他的机器（不论是windows NT还是其他Samba Server）也指定为首要主浏览器时，那么这些机器将会因为争夺主浏览器而在网络上大发广播，影响网络性能。
如果同一个区域内有多台Samba Server，将上面三个参数设定在一台即可。</p>

<pre><code>os level = 200  
</code></pre>

<p>说明：设置samba服务器的os level。该参数决定Samba Server是否有机会成为本地网域的主浏览器。os level从0到255，winNT的os level是32，win95/98的os level是1。Windows 2000的os level是64。如果设置为0，则意味着Samba Server将失去浏览选择。如果想让Samba Server成为PDC，那么将它的os level值设大些。</p>

<pre><code>domain logons = yes/no  
</code></pre>

<p>说明：设置Samba Server是否要做为本地域控制器。主域控制器和备份域控制器都需要开启此项。</p>

<pre><code>logon script = %u.bat  
</code></pre>

<p>说明：当使用者用windows客户端登陆，那么Samba将提供一个登陆档。如果设置成%u.bat，那么就要为每个用户提供一个登陆档。如果人比较多， 那就比较麻烦。可以设置成一个具体的文件名，比如start.bat，那么用户登陆后都会去执行start.bat，而不用为每个用户设定一个登陆档了。 这个文件要放置在[netlogon]的path设置的目录路径下。</p>

<pre><code>wins support = yes/no  
</code></pre>

<p>说明：设置samba服务器是否提供wins服务。</p>

<pre><code>wins server = wins服务器IP地址  
</code></pre>

<p>说明：设置Samba Server是否使用别的wins服务器提供wins服务。</p>

<pre><code>wins proxy = yes/no  
</code></pre>

<p>说明：设置Samba Server是否开启wins代理服务。</p>

<pre><code>dns proxy = yes/no  
</code></pre>

<p>说明：设置Samba Server是否开启dns代理服务。</p>

<pre><code>load printers = yes/no  
</code></pre>

<p>说明：设置是否在启动Samba时就共享打印机。</p>

<pre><code>printcap name = cups  
</code></pre>

<p>说明：设置共享打印机的配置文件。</p>

<pre><code>printing = cups  
</code></pre>

<p>说明：设置Samba共享打印机的类型。现在支持的打印系统有：bsd, sysv, plp, lprng, aix, hpux, qnx</p>

<p><strong>共享参数：Share Definitions</strong></p>

<p>[共享名]<br/>
comment = 任意字符串<br/>
说明：comment是对该共享的描述，可以是任意字符串。</p>

<p>path = 共享目录路径<br/>
说 明：path用来指定共享目录的路径。可以用%u、%m这样的宏来代替路径里的unix用户和客户机的Netbios名，用宏表示主要用于[homes] 共享域。例如：如果我们不打算用home段做为客户的共享，而是在/home/share/下为每个Linux用户以他的用户名建个目录，作为他的共享目 录，这样path就可以写成：path = /home/share/%u; 。用户在连接到这共享时具体的路径会被他的用户名代替，要注意这个用户名路径一定要存在，否则，客户机在访问时会找不到网络路径。同样，如果我们不是以用 户来划分目录，而是以客户机来划分目录，为网络上每台可以访问samba的机器都各自建个以它的netbios名的路径，作为不同机器的共享资源，就可以 这样写：path = /home/share/%m 。</p>

<p>browseable = yes/no<br/>
说明：browseable用来指定该共享是否可以浏览。</p>

<p>writable = yes/no<br/>
说明：writable用来指定该共享路径是否可写。</p>

<p>available = yes/no<br/>
说明：available用来指定该共享资源是否可用。</p>

<p>admin users = 该共享的管理者<br/>
说明：admin users用来指定该共享的管理员（对该共享具有完全控制权限）。在samba 3.0中，如果用户验证方式设置成“security=share”时，此项无效。<br/>
例如：admin users =david，sandy（多个用户中间用逗号隔开）。</p>

<p>valid users = 允许访问该共享的用户<br/>
说明：valid users用来指定允许访问该共享资源的用户。<br/>
例如：valid users = david，@dave，@tech（多个用户或者组中间用逗号隔开，如果要加入一个组就用“@组名”表示。）</p>

<p>invalid users = 禁止访问该共享的用户<br/>
说明：invalid users用来指定不允许访问该共享资源的用户。<br/>
例如：invalid users = root，@bob（多个用户或者组中间用逗号隔开。）</p>

<p>write list = 允许写入该共享的用户<br/>
说明：write list用来指定可以在该共享下写入文件的用户。<br/>
例如：write list = david，@dave</p>

<p>public = yes/no<br/>
说明：public用来指定该共享是否允许guest账户访问。</p>

<p>guest ok = yes/no<br/>
说明：意义同“public”。</p>

<p><strong>几个特殊共享：</strong></p>

<pre><code>[homes]
comment = Home Directories
browseable = no
writable = yes
valid users = %S
; valid users = MYDOMAIN\%S

[printers]
comment = All Printers
path = /var/spool/samba
browseable = no
guest ok = no
writable = no
printable = yes

[netlogon]
comment = Network Logon Service
path = /var/lib/samba/netlogon
guest ok = yes
writable = no
share modes = no

[Profiles]
path = /var/lib/samba/profiles
browseable = no
guest ok = yes
</code></pre>

<p>Samba安装好后，使用testparm命令可以测试smb.conf配置是否正确。使用testparm –v命令可以详细的列出smb.conf支持的配置参数。<br/>
默认的smb.conf有很多个选项和内容，比较繁琐，这里我们按照案例来讲解配置选项，先备份一下自己的smb.conf文件，然后重新建立一个smb.conf。</p>

<pre><code># cp -p /etc/samba/smb.conf    /etc/samba/smb.conf.bak
</code></pre>

<p>案例、公司现有一个工作组workgroup，需要添加samba服务器作为文件服务器，并发布共享目录/share，共享名为public，此共享目录允许所有员工访问。
a. 修改samba的主配置文件如下：<br/>
复制代码</p>

<h1>======================= Global Settings =====================================</h1>

<p>[global]                                                  //该设置与Samba服务整体运行环境有关，它的设置项目针对所有共享资源</p>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; Network Related Options &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;-</h1>

<p>#</p>

<h1>workgroup = NT-Domain-Name or Workgroup-Name, eg: MIDEARTH</h1>

<p>#</p>

<h1>server string is the equivalent of the NT Description field</h1>

<p>#</p>

<h1>netbios name can be used to specify a server name not tied to the hostname</h1>

<pre><code>    workgroup = WORKGROUP                             //定义工作组，也就是windows中的工作组概念
    server string = David Samba Server Version %v     //定义Samba服务器的简要说明
    netbios name = DavidSamba                         //定义windows中显示出来的计算机名称
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash; Logging Options &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash;</h1>

<p>#</p>

<h1>Log File let you specify where to put logs and how to split them up.</h1>

<pre><code>    log file = /var/log/samba/log.%m                  //定义Samba用户的日志文件，%m代表客户端主机名
                                                      //Samba服务器会在指定的目录中为每个登陆主机建立不同的日志文件
</code></pre>

<h1>&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&ndash; Standalone Server Options &mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;&mdash;</h1>

<p>#</p>

<h1>Scurity can be set to user, share(deprecated) or server(deprecated)</h1>

<pre><code>    security = share                                  //共享级别，用户不需要账号和密码即可访问
</code></pre>

<h1>============================ Share Definitions ==============================</h1>

<p>[public]                                                  //设置针对的是共享目录个别的设置，只对当前的共享资源起作用
        comment = Public Stuff                            //对共享目录的说明文件，自己可以定义说明信息
        path = /share                                     //用来指定共享的目录，必选项
        public = yes                                      //所有人可查看,等效于guest ok = yes
复制代码
b. 建立共享目录
上面设置了共享目录为/share，下面就需要建立/share目录：
由于要设置匿名用户可以下载或上传共享文件，所以要给/share目录授权为nobody权限。
c. 重启smb服务</p>

<h1>/etc/init.d/smb restart</h1>

<h1>/etc/init.d/nmb restart</h1>

<ol type="a">
<li>测试smb.conf配置是否正确

<h1>testparm</h1>

<p>使用useradd命令新建系统账户，然后再使用smbpasswd –a建立SMB账户。</p></li>
</ol>


<p>在windows下通过“\ip地址”的方式访问其它文件资源时，一般第一次需要输入密码，以后就无需输入密码直接登陆了，那么如果我们要切换到其它Samba用户怎么办呢？可以在windows下执行如下指令实现：
首先通过开始&ndash;>运行&ndash;>cmd 输入：“net use”命令查看现有的连接，然后执行“net use \Samba服务器IP地址或者netbios名称\ipc$  /del”，删除Samba服务器已经建立的连接。或者执行“net use * /del”将现在所有的连接全部删除。最后，再次执行“\ip地址”时，就可以切换用户了。
Linux客户端访问操作
上面介绍了windows客户端访问Samba服务器的操作，那么在Linux作为客户端时，查看其它Linux Samba服务器共享的文件时，应该如何操作呢？
这就要用到smbclient这个工具，系统默认自带了这个命令，Smbclient常见用法介绍如下：
1、查看Samba服务器的共享资料</p>

<h1>smbclient  –L  //Samba服务器的ip地址  -U  Samba用户名</h1>

<p> “-L”即为list的含义，“-U”是user的意思，如果Samba服务器是无密码访问的话，可以省略“-U  Samba用户名”。
例如：samba需要密码登陆时，查看共享方法如下：</p>

<h1>smbclient  -L //10.0.0.1/public –U tian</h1>

<p>Samba无密码访问时，执行如下命令：</p>

<h1>smbclient  -L //10.0.0.163/public</h1>

<p>password: 直接回车即可。</p>

<p>2、登陆Samba服务器
如果需要在Linux客户端登陆Samba服务器，用法如下：</p>

<h1>smbclient  //Samba服务器的ip地址  -U  Samba用户名</h1>

<p>请看下面执行的操作：</p>

<h1>smbclient //10.0.0.1/public -U tian</h1>

<p>smb: > ?                     //在这里输入?即可查看在smb命令行可用的所有命令。</p>

<p>操作过程与登陆FTP服务器很类似，登陆Samba服务器后，就可以进行文件的上传与下载，如果有足够的权限，还可以进行修改文件操作。
此外，Samba服务器共享出来的文件还可以在Linux客户端进行挂载，这就要用到mount命令，如下所示：</p>

<h1>mount -t cifs -l //10.0.0.1/public /mnt/samba/</h1>

<p>用户名和密码挂载    后面可以跟</p>

<h1>mount -t cifs -l //10.0.0.1/public /mnt/samba -o username=tian,password=paaswd</h1>

<p>用root用户，编辑 vi /etc/fstab, 在最后面加入：
//10.0.0.1/public /mnt/samba  smbfs  defaults,auto,username=tian,password=paaswd 0 0
这样linux机器重新启动都可以自动挂载windows上的共享目录</p>

<p>Samba Web管理工具 SWAT
SWAT(Samba WEB Administration Tool) 是通过浏览器对 Samba 进行管理的工具之一。通过 SWAT，可以在 Samba 允许访问范围内的客户端，用浏览器对服务端的 Samba 进行控制。在线文档的阅览、smb.conf 的确认和编辑，以及密码的变更、服务的重启等等都可以通过 SWAT 来完成，它的直观让 Samba 变得温和化，对那些不喜欢文本界面管理服务器的朋友来说，是一个强大的工具。
swat工具嵌套在xinetd超级守护进程中，要通过启用xinetd进程来启用swat。因此要先安装xinetd工具包，然后安装swat工具包。上面已经安装过samba-swat-3.5.10-125.el6.x86_64，这里不再赘述。
1、配置swat
因为swat是xinetd超级守护进程的一个子进程，所以swat工具配置文件在xinetd目录中。我们要设置swat配置文件，开启此子进程，以便在启用xinetd进程是来启用swat。swat配置文件在/etc/xinetd.d目录中。
打开并编辑 /etc/xinetd.d/swat</p>

<h1>default: off</h1>

<h1>description: SWAT is the Samba Web Admin Tool. Use swat \</h1>

<h1>to configure your Samba server. To use SWAT, \</h1>

<h1>connect to port 901 with your favorite web browser.</h1>

<p>service swat
{
        port            = 901                    //swat默认使用tcp的901端口, 可以修改
        socket_type     = stream                 //通过web来配置samba, 默认使用root账号进入, 可以修改成其他的系统用户
        wait            = no
        only_from       = 127.0.0.1            <br/>
        only_from       = 10.0.0.0               //添加此行, 将“only_from=127.0.0.1”改成“only_from=10.0.0.0”, 只允许内网范围对SWAT进行访问
        user            = root
        server          = /usr/sbin/swat         //swat的执行程序默认在/usr/sbin目录下
        log_on_failure  += USERID
        disable         = yes                    //将“disable=yes”改成“disable=no”, 这样swat子进程就可以随xinetd超级守护进程一起启动了
}</p>

<p>2、启动 swat
因为swat是xinetd的子进程，所以只要启用了xinetd，那么swat也就会伴随xinetd启动。</p>

<h1>service xinetd restart</h1>

<p>打开 swat
在服务端启动 swat后，我们就可以通过 swat允许范围内的客户机的浏览器中，通过 <a href="http://%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E7%BD%91IP:901">http://%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E7%BD%91IP:901</a> 来访问服务端的 swat了，输入 root用户的用户名及密码进入 swat的管理首页，
通过 swat管理 Samba 与直接修改 smb.conf 的方式，在本质上并无差异，但通过浏览器访问的方式，可以使 Samba 的管理更加温和化，更加适用于不擅长使用文本界面、直接修改配置文件的朋友。
4、通过swat配置samba
在swat页面我们可以看到有8个选项，每个选项可以配置samba的不同功能。
HOME：Samba相关程序及文件说明。
GLOBALS：设置Samba的全局参数。即smb.conf文件的[global]。
SHARES：设置Samba的共享参数。
PRINTERS：设置Samba的打印参数。
WIZARD：Samba配置向导。
STATUS：查看和设置Samba的服务状况。
VIEW：查看Samba的文本配置文件，即smb.conf。
PASSWORD：设置Samba用户，可以修改密码，新建删除用户。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ulimit打开的文件和用户名进程]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/01/28/ulimitda-kai-de-wen-jian-he-yong-hu-ming-jin-cheng/"/>
    <updated>2013-01-28T16:13:10+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/01/28/ulimitda-kai-de-wen-jian-he-yong-hu-ming-jin-cheng</id>
    <content type="html"><![CDATA[<p>如何提高Linux的/ Centos的/ RHEL的ulimit打开的文件和用户进程</p>

<!-- more -->


<p>vi /etc/sysctl.conf</p>

<pre><code>fs.file-max = 65536
</code></pre>

<p>增加linux最大用户进程</p>

<p>vi /etc/security/limits.conf</p>

<pre><code>*   soft    nproc   65535
*   hard    nproc   65535
*   soft    nofile  65535
*   hard    nofile  65535
</code></pre>

<p>增加linux针对用户的最大进程文件的限制</p>

<p>vi /etc/security/limits.d/90-nproc.conf</p>

<pre><code>*   soft    nproc   65535
*   hard    nproc   65535
*   soft    nofile  65535
*   hard    nofile  65535
</code></pre>

<p>保存并退出查看linux用户最大进程或文件句柄限制</p>

<p>[root@localhost# ulimit -a</p>

<pre><code>core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 127358
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 65535
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 10240
cpu time               (seconds, -t) unlimited
max user processes              (-u) 65535
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
</code></pre>

<p>如果没有更改重启系统即可</p>

<p>imits.conf 文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，而且只针对于单个会话。</p>

<p>limits.conf的格式如下：<br/>
username|@groupname type resource limit<br/>
username|@groupname：</p>

<p>设置需要被限制的用户名，组名前面加@和用户名区别，也可以用通配符*来做所有用户的限制。
type：有 soft，hard 和 -，<br/>
soft 指的是当前系统生效的设置值。<br/>
hard 表明系统中所能设定的最大值。<br/>
soft 的限制不能比hard 限制高。<br/>
用 - 就表明同时设置了 soft 和 hard 的值。</p>

<pre><code>resource：
core - 限制内核文件的大小
date - 最大数据大小
fsize - 最大文件大小
memlock - 最大锁定内存地址空间
nofile - 打开文件的最大数目
rss - 最大持久设置大小
stack - 最大栈大小
cpu - 以分钟为单位的最多 CPU 时间
noproc - 进程的最大数目
as - 地址空间限制
maxlogins - 此用户允许登录的最大数目
</code></pre>

<p>要使 limits.conf 文件配置生效，必须要确保 pam_limits.so 文件被加入到启动文件中。查看 /etc/pam.d/login 文件中有：<br/>
session required /lib/security/pam_limits.so</p>

<p>例如：修改文件描述符大小(65536)</p>

<p>vi  /etc/security/limits.conf</p>

<pre><code>*   soft    nofile  65536  
*   hard    nofile  65536
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown: 基础 （快速入门）]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/01/25/markdown-ji-chu-(kuai-su-ru-men-)/"/>
    <updated>2013-01-25T13:06:26+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/01/25/markdown-ji-chu-(kuai-su-ru-men-)</id>
    <content type="html"><![CDATA[<p>Markdown 其实很简单就可以上手，此文档提供了一些使用范例，用作备忘。</p>

<!-- more -->


<h2>段落、标题、区块代码</h2>

<p>一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。</p>

<p>单个回车视为空格。连续回车才能分段。行尾加两个空格，即可段内换行。</p>

<p>显示如下代码框只需要在文字前面添加四个空格或者是一个<code>&lt;tab&gt;</code>即可</p>

<pre><code>显示当前代码框只需要在文字前面添加四个空格或者是一个tab即可
</code></pre>

<p>Markdown 支持两种标题的语法，Setext 和 atx 形式。<br/>
Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）。</p>

<pre><code>第一阶标题
===========
</code></pre>

<h1>第一阶标题</h1>

<pre><code>第二阶标题
----------
</code></pre>

<h2>第二阶标题</h2>

<p>Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。</p>

<pre><code>#第一阶标题  
</code></pre>

<h1>第一阶标题</h1>

<pre><code>##第二阶标题  
</code></pre>

<h2>第二阶标题</h2>

<pre><code>###第三阶标题  
</code></pre>

<h3>第三阶标题</h3>

<p>……</p>

<pre><code>######第六阶标题  
</code></pre>

<h6>第六阶标题</h6>

<p>区块引用则使用 email 形式的 &lsquo;>&rsquo; 角括号。</p>

<pre><code>&gt; 此处是区块引用  
</code></pre>

<blockquote><p>此处是区块引用</p></blockquote>

<h2>修辞和强调</h2>

<p>Markdown 使用星号和底线来标记需要强调的区段。</p>

<pre><code>*首尾各一个*号这些文字显示为斜体*  
</code></pre>

<p><em>首尾各一个星号这些文字显示为斜体</em></p>

<pre><code>**首尾各两个*号这些文字显示为粗体**  
</code></pre>

<p><strong>首尾各两个星号这些文字显示为粗体</strong></p>

<pre><code>***首尾各三个*号这些文字显示为斜体加粗体***  
</code></pre>

<p><strong><em>首尾各三个星号这些文字显示为斜体加粗体</em></strong></p>

<pre><code>_首尾使用底线强调区段_  
</code></pre>

<p><em>首尾使用底线强调区段</em></p>

<h2>列表</h2>

<p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的.</p>

<p>星号：</p>

<pre><code>* Candy.
* Gum.
* Booze.  
</code></pre>

<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>


<p>加号：</p>

<pre><code>+ Candy.
+ Gum.
+ Booze.  
</code></pre>

<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>


<p>和减号：</p>

<pre><code>- Candy.
- Gum.
- Booze.  
</code></pre>

<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>


<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>

<pre><code>1. Red
2. Green
3. Blue  
</code></pre>

<ol>
<li>Red</li>
<li>Green</li>
<li><p>Blue</p>

<p> 如果你在项目之间插入空行，那项目的内容会用 <p> 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。<br/>
如果你在项目之间插入空行，那项目的内容会用 <p> 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。</p></li>
</ol>


<hr />

<p>上面是一条横线</p>

<pre><code>---
上面是一条横线
</code></pre>

<p>两个列表之间不能相邻，否则会解释为嵌套的列表</p>

<pre><code>- 外层列表项目
 + 内层列表项目
 + 内层列表项目
 + 内层列表项目
- 外层列表  
</code></pre>

<ul>
<li>外层列表项目</li>
<li>内层列表项目</li>
<li>内层列表项目</li>
<li>内层列表项目</li>
<li>外层列表</li>
</ul>


<p>项目Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。</p>

<p>行内形式是直接在后面用括号直接接上链接：</p>

<pre><code>This is an [example link](http://example.com/).
</code></pre>

<p>This is an <a href="http://example.com/">example link</a>.</p>

<p>你也可以选择性的加上 title 属性</p>

<pre><code>This is an [example link](http://example.com/ "With a Title").
</code></pre>

<p>This is an <a href="http://example.com/" title="With a Title">example link</a>.</p>

<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p>

<pre><code>I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/ "Google"
[2]: http://search.yahoo.com/ "Yahoo Search"
[3]: http://search.msn.com/ "MSN Search"
</code></pre>

<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from
<a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>

<p>title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：</p>

<pre><code>I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
</code></pre>

<p>I start my morning with a cup of coffee and
<a href="http://www.nytimes.com/">The New York Times</a>.</p>

<h2>图片</h2>

<p>图片的语法和链接很像。</p>

<p>行内形式（title 是选择性的）：</p>

<pre><code>![alt text](/path/to/img.jpg "Title")
</code></pre>

<p>参考形式：</p>

<pre><code>![alt text][id]

[id]: /path/to/img.jpg "Title"
</code></pre>

<h2>代码</h2>

<p>在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &amp;、&lt; 和 > 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</p>

<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.

I wish SmartyPants used named entities like `&amp;mdash;`
instead of decimal-encoded entites like `&amp;#8212;`.  
</code></pre>

<p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p>

<p>I wish SmartyPants used named entities like <code>&amp;mdash;</code>
instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p>

<p>如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 &amp;、&lt; 和 > 也一样会自动转成 HTML 实体。</p>

<p>Markdown 语法:</p>

<pre><code>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:

&lt;blockquote&gt;
&lt;p&gt;For example.&lt;/p&gt;
&lt;/blockquote&gt;  
</code></pre>

<p>If you want your page to validate under XHTML 1.0 Strict,
you&rsquo;ve got to put paragraph tags in your blockquotes:</p>

<blockquote>
<p>For example.</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用octopress部署博客到github]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/01/20/li-yong-octopressbu-shu-bo-ke-dao-github/"/>
    <updated>2013-01-20T11:01:31+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/01/20/li-yong-octopressbu-shu-bo-ke-dao-github</id>
    <content type="html"><![CDATA[<p>这里将详细讲解一下如何利用octopress在github上部署一个博客程序，既方便写博客又无需考虑托管问题，同时天然的在本地有一个备份，所有操作都基于git，有无限版本控制。使用markdown书写具体的博客内容，自带代码高亮解决方案。</p>

<p> <!-- more -->
github使用的博客引擎是Jekyll，octopress也是利用Jekyll引擎来开发博客的，因此生成的博客系统可以直接在github pages上运行良好。</p>

<p>环境说明:</p>

<p>本地环境是在ubuntu14.04.1系统下部署的，其他系统也没问题，只需要支持ruby，git</p>

<h2>1.Ruby等依赖安装</h2>

<p>Ruby 需要高于或等于1.9.3版本的，同时由于Jekyll和octopress都是ruby写的，会有诸多ruby依赖，建议切换ruby源为国内源。对于git版本没有太大要求。</p>

<p><strong>Install Ruby</strong></p>

<pre><code>sudo apt-get install ruby
</code></pre>

<p>查看ruby版本方法如下</p>

<pre><code>ruby --version
</code></pre>

<p><strong>Install bundler</strong></p>

<p>bundle可以自动解决依赖，安装方法如下：</p>

<pre><code>sudo apt-get  install bundler
</code></pre>

<p><strong>Install git</strong></p>

<p>默认ubuntu14.04已经自带有安装git，如果没有安装git，请自行安装<a href="http://git-scm.com/">git</a></p>

<p>查看git的版本</p>

<pre><code>git --version
$git version 1.9.1
</code></pre>

<p>安装git</p>

<p>sudo apt-get install git</p>

<h2>2.octopress安装</h2>

<p>octopress 的安装也比较简单，下载源码后会有Gemfile文件来指示所有依赖，使用bundle即可。</p>

<p>下载源码</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<p><strong>安装octopress</strong></p>

<p>使用bundle自动安装,执行命令<em>bundle install</em>就会自动安装所有octopress及其所有依赖。</p>

<pre><code>bundle install
</code></pre>

<p>注意： 如果上面的命令执行失败，提示下面的错误：</p>

<pre><code>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
/usr/bin/ruby1.9.1 extconf.rb 
/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf   (LoadError)
</code></pre>

<p>请执行下面的命令安装ruby1.9.1-dev</p>

<pre><code>sudo apt-get install ruby1.9.1-dev
</code></pre>

<p><strong>安装octopress默认主题</strong></p>

<pre><code>rake install
</code></pre>

<p>在octopress根目录下的Rakefile定义了如何将octopress跟Jekyll连接起来，rake打包了一些常见的如发布博客主题、生成博客数据、发布博客等一系列命令来简化博主的操作。直接使用Jekyll每一个任务都需要不少命令和文件编辑。</p>

<p><strong>tips： 保持Jekyll最新</strong></p>

<p>由于Jekyll更新比较频繁，为了确保你在本地调试的时候看到的网站效果跟GitHub Pages上的一致，务必时常更新Jekyll，推荐使用bundle更新，命令如下：</p>

<pre><code>bundle update
</code></pre>

<h2>3.octopress配置</h2>

<p>实际上octopress已经很好的隐藏了Jekyll的诸多配置，我们只需要简单操作几个文件。octopress就会自动生成相应的Jekyll配置。这里我们仅仅讲解一下_config.yml文件的部分配置项，具体请看官网<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a>。</p>

<p>该文件的配置分为三大部分:Main config、Jekyll&amp;Plugin、3rd Party Settings。</p>

<p>Main config</p>

<pre><code>url:                # For rewriting urls for RSS, etc  
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
description:        # A default meta description for your site
date_format:        # Format dates using Ruby's date strftime syntax
subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
email:              # Email address for the RSS feed if you want it.
</code></pre>

<p>注释说明已经很详细了，有一点需要强调的是，<strong><em>如果你想启用自己的域名来访问，这里的url务必修改为你自己的域名，否则即便你添加了CNAME文件，使用rake部署的时候也不会部署该CNAME文件。</em></strong></p>

<p><em>建议：</em></p>

<blockquote><p>最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。涉及到的文件比较多，小心删除，如果以发表博客，_deploy目录下无需手动删除，重新生成博客后会自动删除。同理，修改定制文件/source/<em>includes/custom/head.html, source/</em>includes/head.html把google的自定义字体去掉。</p></blockquote>

<h2>4.部署到github</h2>

<p>github pages支持托管，地址为<a href="https://pages.github.com/">https://pages.github.com/</a>。在这个页面你只需要大概了解一下什么事github page，如何申请就行了。</p>

<p>新建一个仓库，名为your_user_name.github.io，当然也可以是project，这个方法有点不一样，这里以your_user_name.github.io为例。</p>

<p>在octopress根目录执行 rake setup_github_pages ，按照要求输入仓库地址等，这个命令会在跟目录下新建_deploy目录，这个会push到仓库的master分支，也就是访问博客的文件。</p>

<pre><code>rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.io.git)
    or 'https://github.com/your_username/your_username.github.io')
Repository url: 
</code></pre>

<p>生成博客， <em>rake generate</em> 这个会按照既定规则生成静态文件的博客。</p>

<pre><code>rake generate
</code></pre>

<p>发布博客， <em>rake deploy</em> 将前一步生成的静态文件拷贝到_deploy目录并push到github</p>

<pre><code>rake deploy
</code></pre>

<p><strong>注意：</strong></p>

<p>第一次执行 <em>rake deploy</em> 的时候会报错如下：</p>

<pre><code>! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/blackroom/blackroom.github.com.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>解决方法是手动进入_deploy目录手动强制push一次。</p>

<pre><code>cd octopress/_deploy
git push origin +master
cd ..
rake deploy
</code></pre>

<p>这样再次执行就不会报错了。</p>

<p><strong>博客本地预览</strong></p>

<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入 <em>rake preview</em> 命令，然后就能在浏览器中进行本地预览访问了：&#8221;<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a>&ldquo;或&#8221;<a href="http://localhost:4000/">http://localhost:4000/</a>&#8220;，效果跟仓库的一样。</p>

<pre><code>rake preview
</code></pre>

<p><strong>提交源码用于备份</strong></p>

<p>前面提到的deploy只是部署博客代码到github上面，整个octopress并没有提交，为了保证在任何地方随时发布博客，而无需再次详细配置以保证跟github上的最新代码一致，可以将当前octopress的源码存放到github的source分支下：</p>

<pre><code>git commit -am 'Initial source commit'
git push origin source
</code></pre>

<h2>5.新建博文</h2>

<p>新建博文也非常简单，octopress已经预定义了脚本 <em>rake new_post[&ldquo;title&rdquo;]</em> 方便我们操作，因为Jekyll有一套固定的文档路径以及命名规范，需要按照它的规定来实现才能成功生成博文。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>new_post执行后会自动新建博文，并在相应的markdown文件中写入yaml元数据。</p>

<pre><code>---
layout: post
title: "title"
date: 2013-01-20 16:36
comments: true
categories: 
---
</code></pre>

<p>这里的categories是自定义的分类名，支持的定义方式如下：</p>

<pre><code>#One category
categories: Sass
#Multiple categories example 1
categories: [CSS3, Sass, Media Queries]
#Multiple categories example 2
categories:
- CSS3
- Sass
- Media Queries
</code></pre>

<p>除此之外，还支持 <em>author: Your Name</em> 来指明作者，支持 <em>published: false</em> 表明当前博文是草稿暂时不发布。</p>

<p><strong>发布博文完整流程：</strong></p>

<pre><code>rake new_post["New Post"]
edit the file source/_posts/{DATETIME}-New-Post.markdown
rake generate
git commit -am "Some comment here." 
git push origin source
rake deploy
</code></pre>

<p><strong>新建页面</strong></p>

<p>你可以在博客源目录下任意地方添加页面，Jekyll会自动拼接，对应的url地址也会根据页面路径自动生成 ，如果要添加 about.markdown ，那么就会生成 site.com/about.html ，如果你想要的url地址是 site.com/about/ ,你需要新建的页面应该是 about/index.markdown .同样的，octopress也有脚本完成这个操作。</p>

<pre><code>rake new_page[super-awesome]
$creates /source/super-awesome/index.markdown

rake new_page[super-awesome/page.html]
$creates /source/super-awesome/page.html
</code></pre>

<p>像发布博文一样，默认后缀依然是markdown，但是你可以再Rakefile中修改这个默认配置；一个干净的页面文件如下：</p>

<pre><code>---
layout: page
title: "Super Awesome"
date: 2013-01-20 5:59
comments: true
sharing: true
footer: true
---
</code></pre>

<p>这里的title来自于文件名。你也可以手动修改。跟博文的一样，除了不包含分类 categories，对于 sharing 和 comments 你可以关闭，对于 footer 你可以删除，这样就不会添加默认的footer信息到该页面；如果你不像要再页面中显示日期，可以删除这里的 date 。</p>

<p><strong>内容</strong></p>

<p>页面和博文会调用markup 引擎渲染，默认引擎是再配置文件中；此外，你可以使用任何Jekyll docs中所介绍的模板特性。</p>

<p>默认首页是显示全文，要想仅仅显示摘要，请在合适的地方插入下面的代码</p>

<pre><code>&lt;!-- more --&gt;
</code></pre>

<p>这个会生成一个”Continue →” 链接来指向完整博文，这个跟wordpress的一样。</p>

<p><a href="http://blog.blackroom.cn/blog/2013/01/25/markdown-ji-chu-(kuai-su-ru-men-)/" title="Markdown: 基础">Markdown: 基础 （快速入门）</a></p>
]]></content>
  </entry>
  
</feed>
