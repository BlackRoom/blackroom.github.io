<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BLACKROOM]]></title>
  <link href="http://blog.blackroom.cn/atom.xml" rel="self"/>
  <link href="http://blog.blackroom.cn/"/>
  <updated>2013-08-20T00:00:13+08:00</updated>
  <id>http://blog.blackroom.cn/</id>
  <author>
    <name><![CDATA[BLACKROOM]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bond Linux 网卡绑定]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/08/20/linux-nic-channel-bonding/"/>
    <updated>2013-08-20T17:18:00+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/08/20/linux-nic-channel-bonding</id>
    <content type="html"><![CDATA[<p>Linux中允许多个网卡作为一个网卡使用,提供负载均衡或者是备份冗余。</p>

<!-- more-->


<p>让我们假设我们有两个网络接口(“eth0”和“eth1”),我们把它绑定为一个(“bond0”)。</p>

<p>添加以下行“ /etc/modprobe.conf ”文件。</p>

<pre><code>alias bond0 bonding
</code></pre>

<p>先备份/etc/sysconfig/network-scripts/ifcfg-ethx</p>

<p>创建一个/etc/sysconfig/network-scripts/ifcfg-bond0,配置内容如下（调整网络参数为自己适用的）</p>

<pre><code>DEVICE=bond0
BOOTPROTO=none
ONBOOT=yes
NETWORK=192.168.6.0
NETMASK=255.255.255.0
IPADDR=192.168.6.210
USERCTL=no
BONDING_OPTS="mode=1 miimon=100"    #可添加primary=eth0主备模式下eth0默认为活动的
</code></pre>

<p>修改现有的网络接口配置文件&#8221;ifcfg-eth0&#8221; 和 &ldquo;ifcfg-eth1&rdquo; 添加master和slave参数如下</p>

<pre><code>#eth0
DEVICE=eth0
MASTER=bond0
SLAVE=yes
USERCTL=no
BOOTPROTO=none
ONBOOT=yes

#eth1
DEVICE=eth1
MASTER=bond0
SLAVE=yes
USERCTL=no
BOOTPROTO=none
ONBOOT=yes
</code></pre>

<p>重新启动网络服务使更改生效。</p>

<pre><code># service network restart
Shutting down interface bond0:                              [  OK  ]
Shutting down loopback interface:                           [  OK  ]
Bringing up loopback interface:                             [  OK  ]
Bringing up interface bond0:  Determining if ip address 192.168.6.210 is already in use for device bond0...
                                                            [  OK  ]
Bringing up interface eth0:                                 [  OK  ]
Bringing up interface eth1:                                 [  OK  ]
</code></pre>

<p>查看bond0网卡的信息（如下显示现在工作在eth1上面）</p>

<pre><code># more /proc/net/bonding/bond0 
Ethernet Channel Bonding Driver: v3.6.0 (September 26, 2009)

Bonding Mode: fault-tolerance (active-backup)
Primary Slave: eth0 (primary_reselect always)
Currently Active Slave: eth1
MII Status: up
MII Polling Interval (ms): 100
Up Delay (ms): 0
Down Delay (ms): 0

Slave Interface: eth0
MII Status: down
Speed: Unknown
Duplex: Unknown
Link Failure Count: 0
Permanent HW addr: b0:83:fe:bf:ca:8c
Slave queue ID: 0

Slave Interface: eth1
MII Status: up
Speed: 100 Mbps
Duplex: full
Link Failure Count: 0
Permanent HW addr: b0:83:fe:bf:ca:8d
Slave queue ID: 0
</code></pre>

<p>使用ifconfig命令查看IP地址信息,它显示了“bond0”运行的是“eth1”目前“eth0”为备份状态。</p>

<pre><code># ifconfig
bond0     Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          inet addr:192.168.6.210  Bcast:192.168.6.255  Mask:255.255.255.0
          inet6 addr: fe80::b283:feff:febf:ca8c/64 Scope:Link
          UP BROADCAST RUNNING MASTER MULTICAST  MTU:1500  Metric:1
          RX packets:8918 errors:0 dropped:0 overruns:0 frame:0
          TX packets:34 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:924051 (902.3 KiB)  TX bytes:4006 (3.9 KiB)

eth0      Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          UP BROADCAST SLAVE MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:16 

eth1      Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          UP BROADCAST RUNNING SLAVE MULTICAST  MTU:1500  Metric:1
          RX packets:14320 errors:0 dropped:0 overruns:0 frame:0
          TX packets:70 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:1515495 (1.4 MiB)  TX bytes:10396 (10.1 KiB)
          Interrupt:17 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:24 errors:0 dropped:0 overruns:0 frame:0
          TX packets:24 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:2084 (2.0 KiB)  TX bytes:2084 (2.0 KiB)
</code></pre>

<p>一旦配置好bond,它就像任何其他以太网设备。例如,您可以配置别名接口来处理多个IP地址,如下所示。<br/>
在 &ldquo;/etc/sysconfig/network-scripts&rdquo; 创建 &ldquo;ifcfg-bond0:1&rdquo; 和 &ldquo;ifcfg-bond0:2&rdquo;</p>

<pre><code># ifcfg-bond0:1 文件内容
DEVICE=bond0:1
BOOTPROTO=none
ONBOOT=yes
NETWORK=192.168.0.0
NETMASK=255.255.255.0
IPADDR=192.168.0.210
USERCTL=no
BONDING_OPTS="mode=1 miimon=100"

# ifcfg-bond0:2 文件内容
DEVICE=bond0:2
BOOTPROTO=none
ONBOOT=yes
NETWORK=192.168.0.0
NETMASK=255.255.255.0
IPADDR=192.168.0.220
USERCTL=no
BONDING_OPTS="mode=1 miimon=100"
</code></pre>

<p>注意,设备名称和IP地址不同于原来的“ifcfg-bond0”文件。<br/>
重新启动网络服务使更改生效。</p>

<pre><code># service network restart
Shutting down interface bond0:                             [  OK  ]
Shutting down loopback interface:                          [  OK  ]
Bringing up loopback interface:                            [  OK  ]
Bringing up interface bond0:  Determining if ip address 192.168.6.210 is already in use for device bond0...
Determining if ip address 192.168.0.210 is already in use for device bond0...
Determining if ip address 192.168.0.220 is already in use for device bond0...
                                                           [  OK  ]
Bringing up interface eth0:                                [  OK  ]
Bringing up interface eth1:                                [  OK  ]
</code></pre>

<p>ifconfig命令显示了三个IP地址。</p>

<pre><code># ifconfig
bond0     Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          inet addr:192.168.6.210  Bcast:192.168.6.255  Mask:255.255.255.0
          inet6 addr: fe80::b283:feff:febf:ca8c/64 Scope:Link
          UP BROADCAST RUNNING MASTER MULTICAST  MTU:1500  Metric:1
          RX packets:8918 errors:0 dropped:0 overruns:0 frame:0
          TX packets:34 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:924051 (902.3 KiB)  TX bytes:4006 (3.9 KiB)

bond0:1   Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          inet addr:192.168.0.210  Bcast:192.168.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MASTER MULTICAST  MTU:1500  Metric:1

bond0:2   Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          inet addr:192.168.0.220  Bcast:192.168.0.255  Mask:255.255.255.0
          UP BROADCAST RUNNING MASTER MULTICAST  MTU:1500  Metric:1

eth0      Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          UP BROADCAST SLAVE MULTICAST  MTU:1500  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:0 (0.0 b)  TX bytes:0 (0.0 b)
          Interrupt:16 

eth1      Link encap:Ethernet  HWaddr B0:83:FE:BF:CA:8C  
          UP BROADCAST RUNNING SLAVE MULTICAST  MTU:1500  Metric:1
          RX packets:8918 errors:0 dropped:0 overruns:0 frame:0
          TX packets:34 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:1000 
          RX bytes:924051 (902.3 KiB)  TX bytes:4006 (3.9 KiB)
          Interrupt:17 

lo        Link encap:Local Loopback  
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:28 errors:0 dropped:0 overruns:0 frame:0
          TX packets:28 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0 
          RX bytes:2432 (2.3 KiB)  TX bytes:2432 (2.3 KiB)
</code></pre>

<p><strong>Bond中部分参数详解</strong></p>

<pre><code>BONDING_OPTS="mode=1 miimon=100"
</code></pre>

<p>其中mode=1表示主备模式，也就是只有一块网卡是active的，只提供失效保护。如果mode=0则是负载均衡模式的，所有的网卡都是active，还有其他一些模式很少用到<br/>
miimon=100表示每100ms检查一次链路连接状态，如果不通则会切换物理网卡<br/>
primary=eth0表示主备模式下eth0为默认的active网卡</p>

<p>miimon是毫秒数，每100毫秒触发检测线路稳定性的事件。<br/>
mode 是ifenslave的工作状态。</p>

<p>一共有7种方式：<br/>
=0： (balance-rr) Round-robin policy: （平衡抡循环策略）：传输数据包顺序是依次传输，直到最后一个传输完毕， 此模式提供负载平衡和容错能力。<br/>
=1： (active-backup) Active-backup policy:（主-备份策略）：只有一个设备处于活动状态。 一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得。 此模式提供了容错能力。 <br/>
=2：(balance-xor) XOR policy:（平衡 策略）： 传输根据原地址布尔值选择传输设备。 此模式提供负载平衡和容错能力。<br/>
=3：(broadcast) broadcast policy:  （广播策略）：将所有数据包传输给所有接口。 此模式提供了容错能力。<br/>
=4：(802.3ad) IEEE 802.3ad Dynamic link aggregation.   IEEE 802.3ad 动态链接聚合：创建共享相同的速度和双工设置的聚合组。<br/>
=5：(balance-tlb) Adaptive transmit load balancing（适配器传输负载均衡）:没有特殊策略，第一个设备传不通就用另一个设备接管第一个设备正在处理的mac地址，帮助上一个传。<br/>
=6：(balance-alb) Adaptive load balancing: （适配器传输负载均衡）：大致意思是包括mode5，bonding驱动程序截获 ARP 在本地系统发送出的请求，用其中之一的硬件地址覆盖从属设备的原地址。就像是在服务器上不同的人使用不同的硬件地址一样。</p>

<p>这些选项可以用命令：# modinfo bonding 来查看</p>

<p><em>有一点需要注意，如果设置为mode=0（平衡轮询模式）需要上层交换机开启汇聚。mode 0下bond所绑定的网卡的IP都被修改成一样的mac地址，如果这些网卡都被接在同一个交换机，那么交换机的arp表里这个mac地址对应的端口就有多个，那么交换机接受到发往这个mac地址的包应该往哪个端口转发呢？正常情况下mac地址是全球唯一的，一个mac地址对应多个端口在网络中会出问题。<br/>
所以mode0下的bond如果连接到交换机，交换机这几个端口应该采取聚合方式，因为交换机做了聚合后，聚合下的几个端口会捆绑成一个。</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Disk I/O Error]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/06/17/linux-disk-io-error/"/>
    <updated>2013-06-17T16:34:00+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/06/17/linux-disk-io-error</id>
    <content type="html"><![CDATA[<p>今天线上某一大数据存储应用挂掉了，查看日志发现大量的I/O错误，记录下。</p>

<!--more-->


<p>应用突然挂掉查看应用日志发现有几个表出现写入错误，接着查看系统日志，发现大量如下信息。</p>

<pre><code>kernel: end_request: I/O error, dev sda, sector 155697224
kernel: sd 0:2:0:0: [sda]  Result: hostbyte=DID_ERROR driverbyte=DRIVER_OK
kernel: sd 0:2:0:0: [sda] CDB: Read(10): 28 00 09 47 c0 48 00 00 08 00
</code></pre>

<p>第一个想到的是硬盘坏了，这台机器上面是8块600GSAS硬盘做RAID0目的是为了充分利用磁盘空间和读写速度。</p>

<p><strong>利用MegaCli检查下RAID的状态已经磁盘状况</strong></p>

<p>MegaCli是一款管理维护硬件RAID软件，可以通过它来了解当前raid卡的所有信息，包括 raid卡的型号，raid的阵列类型，raid 上各磁盘状态，等等</p>

<pre><code>/opt/MegaRAID/MegaCli/MegaCli64 -LDInfo -Lall -aALL

…………
Bad Blocks Exist: Yes   #显示有坏块
</code></pre>

<p>接着查看下是那几块硬盘有问题</p>

<pre><code>/opt/MegaRAID/MegaCli/MegaCli64 -PDList -aALL

…………
Slot Number: 0
Media Error Count: 20   #正常状态下为0
Other Error Count: 0
…………
Slot Number: 6
Media Error Count: 2    #正常状态下为0
Other Error Count: 0
</code></pre>

<p>发现有两块硬盘中有坏块，分别是第一块和第5块。机架上的硬盘标识是从0开始的。</p>

<p><strong>利用Badblocks命令将磁盘中的坏块找出来</strong></p>

<p>badblocks是linux及其类似的操作系统中，扫描检查硬盘和外部设备损坏扇区的命令工具。损坏的扇区或者损坏的区块是硬盘中因为永久损坏或者是操作系统不能读取的空间。</p>

<pre><code>fdisk -l    #查看下系统中的分区
badblocks -v /dev/sda2  
badblocks -v /dev/sda2  /tmp/bad-blocks.txt #也可以打印到文件中
</code></pre>

<p>这个时候应该尽早将应用下线，替换掉有坏块的硬盘，当然你也可以继续使用，建议换掉。</p>

<p>如果要继续使用硬盘可以使用<strong>e2fsck</strong>命令强迫操作系统不使用这些损坏的区块存储数据。<br/>
利用badblocks扫描检查硬盘的结果使用e2fsck命令来配置操作系统不在这些损坏的扇区中存储数据。</p>

<pre><code>e2fsck -l /tmp/bad-blocks.txt  /dev/sda2    #使用之前扫描坏块打印到的文件
</code></pre>

<p>注意：在运行e2fsck命令前，请保证设备没有被挂载。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下加载PHP扩展模块的一种方法]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/04/15/linux-upload-php-module/"/>
    <updated>2013-04-15T13:14:00+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/04/15/linux-upload-php-module</id>
    <content type="html"><![CDATA[<p>我们在使用php源码包安装时，加载php的扩展模块非常方便，使用confgiure命令配置时加载相关模块非常的灵活。但是如果是rpm包安装的该如何自如的加载模块呢？</p>

<!-- more -->


<p>php提供了一个开发包<strong>php-devel</strong>的RPM包，安装后，会在系统/usr/bin目录下新增了两条命令<strong>phpize</strong>和<strong>php-config</strong>。</p>

<pre><code>phpize  命令是用来准备 PHP 扩展库的编译环境的。
php-config  主要是负责扩展程序的配置。
</code></pre>

<p><strong>安装方法</strong></p>

<p>先查看系统中已安装了那些php程序，主要是查看是否安装了php开发包php-devel的rpm包。如果没有，我们需要安装下php-devel 。</p>

<pre><code># rpm -qa|grep php
php-cli-5.3.3-27.el6_5.2.x86_64
php-mysql-5.3.3-27.el6_5.2.x86_64
php-common-5.3.3-27.el6_5.2.x86_64
php-pdo-5.3.3-27.el6_5.2.x86_64
php-5.3.3-27.el6_5.2.x86_64
php-xml-5.3.3-27.el6_5.2.x86_64
php-gd-5.3.3-27.el6_5.2.x86_64
php-mcrypt-5.3.3-3.el6.x86_64
php-bcmath-5.3.3-27.el6_5.2.x86_64
php-mbstring-5.3.3-27.el6_5.2.x86_64
</code></pre>

<p>系统中并没有安装php-devel的rpm包，需要安装一下，可以去官网下载rpm包，也可以使用yum安装非常方便。</p>

<pre><code># yum -y install php-devel
</code></pre>

<p>安装成功后，会在系统/usr/bin目录下新增了两条命令<strong>phpize</strong>和<strong>php-config</strong>。</p>

<p><strong>使用方法</strong></p>

<p>以安装php protobuf模块为例，其他模块雷同。</p>

<pre><code># git clone https://github.com/allegro/php-protobuf.git
# cd php-protobuf
# phpize
# ./configure
# make
# make test
# make install
</code></pre>

<p>下载软件包，我这里软件包在github上所以直接用git克隆下来，进入软件包执行 <strong>phpize</strong> 准备PHP扩展库的编译环境，后面就是编译安装了。</p>

<p>安装成功后，我们需要修改php.ini配置文件.</p>

<pre><code># echo "extension=protobuf.so" &gt; /etc/php.d/protobuf.ini
# php -m
</code></pre>

<p>可以使用 <strong>php -m</strong> 命令查看下是否加载了protobuf模块。<br/>
也可以使用简单的php网页查看php的安装信息。</p>

<pre><code>&lt;?
phpinfo()
?&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[让Samba用户通过WEB页面修改密码]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/04/05/samba-web-modify-password/"/>
    <updated>2013-04-05T17:20:00+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/04/05/samba-web-modify-password</id>
    <content type="html"><![CDATA[<p>前面一篇文章介绍了Samba文件共享服务器的安装及配置方法，最近遇到一个问题所有的用户密码只能通过登录到linux系统修改，而大多数用户是不允许登录到linux系统服务器的。很多其他部门的同事作为Windows终端的用户根本没听说过Linux，更别说使用了。</p>

<!-- more -->


<p>也考虑过把samba建成pdc，windows加入域中，samba用户通过windows登陆域，samba用户在windows上按“ctrl+alt+del”修改密码，或是采用LDAP来做。</p>

<p>后来找到一种更简单的方法使用changepassword这个软件让用户通过web修改改密码，这种看似是比较简单且人性化的了。</p>

<h2>一.简介</h2>

<p>changepassword是能让用户从web界面修改系统密码的一款软件，它并没有让你获得修改samba密码的功能。<br/>
而如何实现修改samba密码的功能呢，就要用到pam_smbpass.so这个模块，它才是真正能让samba密码和系统密码同步的利器。</p>

<p>实际上的原理其实是，用户通过Web页面使用changepassword来修改系统的密码，然后由pam_smbpass.so模块自动将系统密码同步给了samba，以达到用户修改samba密码的目的。</p>

<h2>二.安装配置Changerpassword</h2>

<p>系统环境：
操作系统：CentOS 6.4
已装服务：Samba，httpd 且启动正常</p>

<h4>1.安装changerpassword以实现用户利用web页面修改密码</h4>

<p>从changerpassword的官网下载<a href="http://changepassword.sourceforge.net/">changepassword</a></p>

<pre><code># wget http://sourceforge.net/projects/changepassword/files/changepassword/0.9/changepassword-0.9.tar.gz
# yum -y install gcc
#tar zxvf changepassword-0.9.tar.gz
#cd changepassword-0.9
</code></pre>

<p>修改<strong>conf.h</strong>头文件，设置软件修改密码使用的临时目录（本来为/tmp，但是实际上是不能用的，要新建一个权限为777的目录）<br/>
将前三行的定义修改为自己创建的目录（这里我修改到了/var/smbchangepwd目录下）：</p>

<pre><code># vim conf.h
// temporary directory and files to use
char TMPFILE[]=”/var/smbchangepwd/changepassword-shadow-XXXXXX”;
char TMPSMBFILE[]=”/var/smbchangepwd/changepassword-smb-XXXXXX”;
char TMPSQUIDFILE[]=”/var/smbchangepwd/changepassword-squid-XXXXXX”;
</code></pre>

<p>创建需要用到的目录（第二个为编译configure时候用到的cgidir）</p>

<pre><code>mkdir –pv /var/smbchangepwd
mkdir –pv /home/admin/www/samba-change-passwd
</code></pre>

<p>编译安装</p>

<pre><code># ./configure –enable-cgidir=/home/admin/www/samba-change-passwd –enable-language=English –enable-smbpasswd=/etc/samba/smbpasswd –disable-squidpasswd –enable-logo=opentech.jpg
</code></pre>

<p>这里解释一下:</p>

<pre><code>–enable-cgidir    这个目录是Web页面要读取的目录，一般可以设置为网站的根目录，或者网站根目录下的某个目录，比如/var/www/smb/，程序会将最后的web访问页放在这个目录中。
–enable-language  设置程序的显示语言，里面支持Chinese
–enable-smbpasswd smb的密码文件存放位置
–disable-squidpasswd  禁用squid同步密码
–enable-logo      这是装饰Web页面中的标题的图片，可以随便指定，只要是http支持的图片格式都可以，需要我们手动放一个图片在cgidir中。
</code></pre>

<p>按照官方的来的话这里只要直接make，完后make install 即可，但是，从我自己安装的经验来看，这里一定会报错的，报错如下：</p>

<pre><code>DSMBPASSWD=\”/etc/samba/smbpasswd\” -DSQUIDPASSWD=\”no\” -DLOGO=\”none\” -L./smbencrypt –ldes
/usr/bin/ld: skipping incompatible ./smbencrypt/libdes.a when searching for –ldes
/usr/bin/ld: cannot find –ldes
collect2: ld returned 1 exit status
make: *** [changepassword.cgi] Error 1
</code></pre>

<p>从报错可以看到/usr/bin/ld: cannot find –ldes ，网上有不少解决办法，实际上那都无法解决根本问题，而官方实际上也知道会遇到这个问题，于是我们只需重新编译加载libdes即可</p>

<pre><code># cd smbencrypt/
# tar -xzvf libdes-4.04b.tar.gz
# cd des/
# make
# cp libdes.a ../
# cd ../..
</code></pre>

<p>这时从新make,make install即可完成安装。</p>

<pre><code># make
# make install
</code></pre>

<p>安装程序会拷贝一个叫changepassword.cgi的文件到我们指定的–cgidir目录，这时，只要我们配置好http,确保能从web直接访问到这个文件即可。当然，别忘了拷贝一个你喜欢的图片到–cgidir所指定的那个目录,名字当然就用那个–logo的名字~
这个根据自己Web配置不同自己添加。</p>

<h4>2.配置Apache</h4>

<p>设置apache支持cgi模，搜索cgi 去掉如下注释</p>

<pre><code># vi /usr/local/apache2/conf/httpd.conf
--------------
LoadModule cgid_module modules/mod_cgid.so
AddHandler cgi-script .cgi
--------------

搜索 DocumentRoot,在/usr/local/apache2/htdocs类目下找到Options选项，修改为.

--------------
Options Indexes FollowSymLinks ExecCGI
--------------
</code></pre>

<p>重启服务</p>

<pre><code># /usr/local/apache2/bin/apachectl restart
</code></pre>

<p>OK,一切就绪后，打开Web，在浏览器中输入：</p>

<pre><code>http://ip地址/如果还有目录/changepassword.cgi
</code></pre>

<h4>3.常见错误提示：</h4>

<h5>a.提示无法更改临时目录，解决方法：查看/var/smbchangepwd临时目录权限是否为777 还要要在编译前把目录改为777。</h5>

<h5>b.提示没有的用户或用户无效，在下面添加完pam模块后请务必注释掉默认的passdb backend = tdbsam项，改为passdb backend = smbpasswd    确认smbpasswd -a 添加的用户在 /etc/samba/smbpasswd文件中</h5>

<p>至此已经配置好web页面改密码但是现在改的只是系统的密码还没有配置samba同步系统密码。</p>

<h2>三.实现samba与系统密码同步</h2>

<p>实际上配置samba与系统密码同步的原理十分简单，我们都知道密码都是由Pam进行管理的，理论上，当我们使用命令来修改系统密码的时候是调用了pam的密码管理机制，才修改成功的，那么我们其实只要在Pam里加上当修改系统密码的时候也一起让pam把samba的密码给修改掉，就可以了。</p>

<p>samba官方提供的专门用于使用pam来管理密码的模块：pam_smbpass.so<br/>
它的位置位于：</p>

<pre><code>x86 : /lib/security/pam_smbpass.so
x64 : /lib64/security/pam_smbpass.so
</code></pre>

<p>然后我们只需要将这个模块加入到密码验证的机制里即可，编辑<strong>system-auth</strong>这个pam文件，修改里面的password段插入一行新的password行（这里我的system-auth的配置，注意我加了一行关于pam_smbpass.so的内容）</p>

<pre><code># vim /etc/pam.d/system-auth
auth        required      pam_env.so
auth        sufficient    pam_fprintd.so
auth        sufficient    pam_unix.so nullok try_first_pass
auth        requisite     pam_succeed_if.so uid &gt;= 500 quiet
auth        required      pam_deny.so

account     required      pam_unix.so
account     sufficient    pam_localuser.so
account     sufficient    pam_succeed_if.so uid &lt; 500 quiet
account     required      pam_permit.so

password    requisite     pam_cracklib.so try_first_pass retry=3 type=
password    requisite     pam_smbpass.so nullok use_authtok try_first_pass
password    sufficient    pam_unix.so sha512 shadow nullok try_first_pass use_authtok
password    required      pam_deny.so

session     optional      pam_keyinit.so revoke
session     required      pam_limits.so
session     [success=1 default=ignore] pam_succeed_if.so service in crond quiet use_uid
session     required      pam_unix.so
</code></pre>

<p>然后保存，这时理论上，当你修改系统密码的时候，关联的这个模块也会修改samba的密码，但是这还不够，我们还要对samba进行一些设置，在<strong>[global]</strong>段设置samba的加密方式为</p>

<pre><code># vim /etc/samba/smb.conf
    security = user
    passdb backend = smbpasswd
    encrypt passwords = yes
    smb passwd file = /etc/samba/smbpasswd
    pam password change = yes
</code></pre>

<p>注意，请务必注释掉默认的<strong>passdb backend = tdbsam</strong>项改为<strong>passdb backend = smbpasswd</strong>要不然利用<strong>smbpasswd -a</strong> 添加用户不会添加到指定的文件中/etc/samba/smbpasswd<br/>
还有一点需要注意添加完pam_smbpass.so 这个模块后所有的用户必须使用smbpasswd -a 添加到samba中要不然系统用户改不了密码</p>

<p>然后重启samba:</p>

<pre><code># /etc/init.d/smb restart
</code></pre>

<p>如果一切正确的话，在/etc/samba下应该已经有一个 smbpasswd这个文件了。这个文件里记录的就是所有可以登陆samba的用户以及密码，初始情况下应该是空才对。</p>

<p>接下来就需要我们手动使用<strong>smbpasswd –a</strong> 往里添加用户了。<br/>
注意：只有在smbpasswd中已经存在的系统用户，当你修改该系统用户的密码的时候，才会一同修改smbpasswd中的用户。这样，我们就达成了让用户从Web修改自己用户系统密码，然后同步到smb的任务。</p>

<p>将系统所有用户导入到samba  （注意此时导入的samba用户好像密码无法登陆需在添加完pam模块后更改下系统用户的密码方可）</p>

<pre><code>cat /etc/passwd |mksmbpasswd.sh &gt; /etc/samba/smbpasswd
smbpasswd +用户   改密samba密码
echo passwd123 |passwd --stdin username    将username用户的密码直接改为passwd123
</code></pre>

<p><a href="http://blog.blackroom.cn/blog/2013/03/28/smba-wen-jian-fu-wu-qi/">Samba文件服务器配置</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Samba文件服务器配置]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/03/28/smba-wen-jian-fu-wu-qi/"/>
    <updated>2013-03-28T16:14:00+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/03/28/smba-wen-jian-fu-wu-qi</id>
    <content type="html"><![CDATA[<h2>一.Samba简介</h2>

<p>Samba是一个能让Linux系统应用Microsoft网络通讯协议的软件，而SMB是Server Message Block的缩写，即为服务器消息块 ，SMB主要是作为Microsoft的网络通讯协议，后来Samba将SMB通信协议应用到了Linux系统上，就形成了现在的Samba软件。后来微软又把 SMB 改名为 CIFS（Common Internet File System），即公共 Internet 文件系统，并且加入了许多新的功能，这样一来，使得Samba具有了更强大的功能。</p>

<!-- more-->


<p>Samba最大的功能就是可以用于Linux与windows系统直接的文件共享和打印共享，Samba既可以用于windows与Linux之间的文件共享，也可以用于Linux与Linux之间的资源共享，由于NFS(网络文件系统）可以很好的完成Linux与Linux之间的数据共享，因而 Samba较多的用在了Linux与windows之间的数据共享上面。</p>

<p>SMB是基于客户机/服务器型的协议，因而一台Samba服务器既可以充当文件共享服务器，也可以充当一个Samba的客户端，例如，一台在Linux 下已经架设好的Samba服务器，windows客户端就可以通过SMB协议共享Samba服务器上的资源文件，同时，Samba服务器也可以访问网络中 其它windows系统或者Linux系统共享出来的文件。</p>

<p>Samba在windows下使用的是NetBIOS协议，如果你要使用Linux下共享出来的文件，请确认你的windows系统下是否安装了NetBIOS协议。</p>

<p>组成Samba运行的有两个服务，一个是SMB，另一个是NMB；SMB是Samba 的核心启动服务，主要负责建立 Linux Samba服务器与Samba客户机之间的对话， 验证用户身份并提供对文件和打印系统的访问，只有SMB服务启动，才能实现文件的共享，监听139 TCP端口；而NMB服务是负责解析用的，类似与DNS实现的功能，NMB可以把Linux系统共享的工作组名称与其IP对应起来，如果NMB服务没有启动，就只能通过IP来访问共享文件，监听137和138 UDP端口。</p>

<p>Samba服务器可实现如下功能：WINS和DNS服务； 网络浏览服务； Linux和Windows域之间的认证和授权； UNICODE字符集和域名映射；满足CIFS协议的UNIX共享等。</p>

<h2>二.系统环境</h2>

<p>系统平台：CentOS 6.4  x86_64<br/>
Samba版本：samba-3.6.9-169.el6_5.x86_64<br/>
防火墙已关闭/iptables: Firewall is not running.
SELINUX=disabled</p>

<p>如果需要开启防火墙只需要打开<strong>TCP139端口和UDP137,138口端</strong></p>

<h2>三.安装Samba服务</h2>

<h4>1.如果联网的话可以使用yum工具安装方便快捷，如果未联网，则挂载系统光盘进行安装。</h4>

<pre><code># yum install samba samba-client samba-swat
</code></pre>

<p>使用yum如果有有依赖关系的包<strong>samba-common、samba-winbind-clients、libsmbclient</strong>将会自动安装上去。</p>

<h4>2.安装包说明</h4>

<pre><code>samba-common    主要提供samba服务器的设置文件与设置文件语法检验程序testparm
samba-client    客户端软件，主要提供linux主机作为客户端时，所需要的工具指令集
samba-swat  基于https协议的samba服务器web配置界面
samba   服务器端软件，主要提供samba服务器的守护程序，共享文档，日志的轮替，开机默认选项  
</code></pre>

<p>Samba服务器安装完毕，会生成配置文件目录<strong>/etc/samba</strong>和其它一些samba可执行命令工具，<strong>/etc/samba/smb.conf</strong>是samba的核心配置文件，<strong>/etc/init.d/smb</strong>是samba的启动|关闭文件。</p>

<h4>3.启动Samba服务器,查看samba的服务启动情况,设置开机自启动.</h4>

<p>可以通过<strong>/etc/init.d/smb (start|stop|restart)</strong>来启动、关闭、重启Samba服务<br/>
    # service smb start 启动samba服务
    # service smb status    查看samba的服务启动情况
    # chkconfig &ndash;level 35 smb on   在3、5级别上自动运行samba服务</p>

<h2>四.配置Samba服务</h2>

<pre><code>Samba的主配置文件为/etc/samba/smb.conf
</code></pre>

<p>主配置文件由两部分构成<br/>
<strong>Global Settings (55-245行)</strong><br/>
该设置都是与Samba服务整体运行环境有关的选项，它的设置项目是针对所有共享资源的。<br/>
<strong>Share Definitions (246-尾行)</strong><br/>
该设置针对的是共享目录个别的设置，只对当前的共享资源起作用。</p>

<p><strong>全局参数：Global Settings</strong></p>

<p>[global]
config file = /usr/local/samba/lib/smb.conf.%m</p>

<p>说明：config file可以让你使用另一个配置文件来覆盖缺省的配置文件。如果文件不存在，则该项无效。这个参数很有用，可以使得samba配置更灵活，可以让一台 samba服务器模拟多台不同配置的服务器。比如，你想让PC1（主机名）这台电脑在访问Samba Server时使用它自己的配置文件，那么先在/etc/samba/host/下为PC1配置一个名为smb.conf.pc1的文件，然后在 smb.conf中加入：config file = /etc/samba/host/smb.conf.%m。这样当PC1请求连接Samba Server时，smb.conf.%m就被替换成smb.conf.pc1。这样，对于PC1来说，它所使用的Samba服务就是由 smb.conf.pc1定义的，而其他机器访问Samba Server则还是应用smb.conf。</p>

<p>workgroup = WORKGROUP<br/>
说明：设定 Samba Server 所要加入的工作组或者域。</p>

<p>server string = Samba Server Version %v<br/>
说明：设定 Samba Server 的注释，可以是任何字符串，也可以不填。宏%v表示显示Samba的版本号。</p>

<p>netbios name = smbserver<br/>
说明：设置Samba Server的NetBIOS名称。如果不填，则默认会使用该服务器的DNS名称的第一部分。netbios name和workgroup名字不要设置成一样了。</p>

<p>interfaces = lo eth0 192.168.12.2/24 192.168.13.2/24<br/>
说明：设置Samba Server监听哪些网卡，可以写网卡名，也可以写该网卡的IP地址。</p>

<p>hosts allow = 127. 192.168.1. 192.168.10.1<br/>
说明：表示允许连接到Samba Server的客户端，多个参数以空格隔开。可以用一个IP表示，也可以用一个网段表示。hosts deny 与hosts allow 刚好相反。<br/>
例如：hosts allow=172.17.2.EXCEPT172.17.2.50<br/>
表示容许来自172.17.2.*的主机连接，但排除172.17.2.50<br/>
hosts allow=172.17.2.0/255.255.0.0<br/>
表示容许来自172.17.2.0/255.255.0.0子网中的所有主机连接</p>

<p>hosts allow=M1，M2<br/>
表示容许来自M1和M2两台计算机连接</p>

<p>hosts allow=@pega<br/>
表示容许来自pega网域的所有计算机连接</p>

<p>max connections = 0<br/>
说明：max connections用来指定连接Samba Server的最大连接数目。如果超出连接数目，则新的连接请求将被拒绝。0表示不限制。</p>

<p>deadtime = 0<br/>
说明：deadtime用来设置断掉一个没有打开任何文件的连接的时间。单位是分钟，0代表Samba Server不自动切断任何连接。</p>

<p>time server = yes/no<br/>
说明：time server用来设置让nmdb成为windows客户端的时间服务器。</p>

<p>log file = /var/log/samba/log.%m<br/>
说明：设置Samba Server日志文件的存储位置以及日志文件名称。在文件名后加个宏%m（主机名），表示对每台访问Samba Server的机器都单独记录一个日志文件。如果pc1、pc2访问过Samba Server，就会在/var/log/samba目录下留下log.pc1和log.pc2两个日志文件。</p>

<p>max log size = 50<br/>
说明：设置Samba Server日志文件的最大容量，单位为kB，0代表不限制。</p>

<p>security = user<br/>
说明：设置用户访问Samba Server的验证方式，一共有四种验证方式。<br/>
1. share：用户访问Samba Server不需要提供用户名和口令, 安全性能较低。<br/>
2. user：Samba Server共享目录只能被授权的用户访问,由Samba Server负责检查账号和密码的正确性。账号和密码要在本Samba Server中建立。<br/>
3. server：依靠其他Windows NT/2000或Samba Server来验证用户的账号和密码,是一种代理验证。此种安全模式下,系统管理员可以把所有的Windows用户和口令集中到一个NT系统上,使用 Windows NT进行Samba认证, 远程服务器可以自动认证全部用户和口令,如果认证失败,Samba将使用用户级安全模式作为替代的方式。<br/>
4. domain：域安全级别,使用主域控制器(PDC)来完成认证。</p>

<p>passdb backend = tdbsam<br/>
说明：passdb backend就是用户后台的意思。目前有三种后台：smbpasswd、tdbsam和ldapsam。sam应该是security account manager（安全账户管理）的简写。<br/>
1.smbpasswd：该方式是使用smb自己的工具smbpasswd来给系统用户（真实用户或者虚拟用户）设置一个Samba密码，客户端就用这个密码来访问Samba的资源。smbpasswd文件默认在/etc/samba目录下，不过有时候要手工建立该文件。<br/>
2.tdbsam： 该方式则是使用一个数据库文件来建立用户数据库。数据库文件叫passdb.tdb，默认在/etc/samba目录下。passdb.tdb用户数据库 可以使用smbpasswd –a来建立Samba用户，不过要建立的Samba用户必须先是系统用户。我们也可以使用pdbedit命令来建立Samba账户。pdbedit命令的 参数很多，我们列出几个主要的。<br/>
　　pdbedit –a username：新建Samba账户。<br/>
　　pdbedit –x username：删除Samba账户。<br/>
　　pdbedit –L：列出Samba用户列表，读取passdb.tdb数据库文件。<br/>
　　pdbedit –Lv：列出Samba用户列表的详细信息。<br/>
　　pdbedit –c “[D]” –u username：暂停该Samba用户的账号。<br/>
　　pdbedit –c “[]” –u username：恢复该Samba用户的账号。<br/>
3.ldapsam：该方式则是基于LDAP的账户管理方式来验证用户。首先要建立LDAP服务，然后设置“passdb backend = ldapsam:ldap://LDAP Server”</p>

<p>encrypt passwords = yes/no<br/>
说明：是否将认证密码加密。因为现在windows操作系统都是使用加密密码，所以一般要开启此项。不过配置文件默认已开启。</p>

<p>smb passwd file = /etc/samba/smbpasswd<br/>
说明：用来定义samba用户的密码文件。smbpasswd文件如果没有那就要手工新建。</p>

<p>username map = /etc/samba/smbusers<br/>
说明：用来定义用户名映射，比如可以将root换成administrator、admin等。不过要事先在smbusers文件中定义好。比如：root = administrator admin，这样就可以用administrator或admin这两个用户来代替root登陆Samba Server，更贴近windows用户的习惯。</p>

<p>guest account = nobody<br/>
说明：用来设置guest用户名。</p>

<p>socket options = TCP_NODELAY SO_RCVBUF=8192 SO_SNDBUF=8192<br/>
说明：用来设置服务器和客户端之间会话的Socket选项，可以优化传输速度。</p>

<p>domain master = yes/no<br/>
说明：设置Samba服务器是否要成为网域主浏览器，网域主浏览器可以管理跨子网域的浏览服务。</p>

<p>local master = yes/no<br/>
说明：local master用来指定Samba Server是否试图成为本地网域主浏览器。如果设为no，则永远不会成为本地网域主浏览器。但是即使设置为yes，也不等于该Samba Server就能成为主浏览器，还需要参加选举。</p>

<p>preferred master = yes/no<br/>
说明：设置Samba Server一开机就强迫进行主浏览器选举，可以提高Samba Server成为本地网域主浏览器的机会。如果该参数指定为yes时，最好把domain master也指定为yes。使用该参数时要注意：如果在本Samba Server所在的子网有其他的机器（不论是windows NT还是其他Samba Server）也指定为首要主浏览器时，那么这些机器将会因为争夺主浏览器而在网络上大发广播，影响网络性能。
如果同一个区域内有多台Samba Server，将上面三个参数设定在一台即可。</p>

<p>os level = 200<br/>
说明：设置samba服务器的os level。该参数决定Samba Server是否有机会成为本地网域的主浏览器。os level从0到255，winNT的os level是32，win95/98的os level是1。Windows 2000的os level是64。如果设置为0，则意味着Samba Server将失去浏览选择。如果想让Samba Server成为PDC，那么将它的os level值设大些。</p>

<p>domain logons = yes/no<br/>
说明：设置Samba Server是否要做为本地域控制器。主域控制器和备份域控制器都需要开启此项。</p>

<p>logon script = %u.bat<br/>
说明：当使用者用windows客户端登陆，那么Samba将提供一个登陆档。如果设置成%u.bat，那么就要为每个用户提供一个登陆档。如果人比较多， 那就比较麻烦。可以设置成一个具体的文件名，比如start.bat，那么用户登陆后都会去执行start.bat，而不用为每个用户设定一个登陆档了。 这个文件要放置在[netlogon]的path设置的目录路径下。</p>

<p>wins support = yes/no<br/>
说明：设置samba服务器是否提供wins服务。</p>

<p>wins server = wins服务器IP地址<br/>
说明：设置Samba Server是否使用别的wins服务器提供wins服务。</p>

<p>wins proxy = yes/no<br/>
说明：设置Samba Server是否开启wins代理服务。</p>

<p>dns proxy = yes/no<br/>
说明：设置Samba Server是否开启dns代理服务。</p>

<p>load printers = yes/no<br/>
说明：设置是否在启动Samba时就共享打印机。</p>

<p>printcap name = cups<br/>
说明：设置共享打印机的配置文件。</p>

<p>printing = cups<br/>
说明：设置Samba共享打印机的类型。现在支持的打印系统有：bsd, sysv, plp, lprng, aix, hpux, qnx</p>

<p><strong>共享参数：Share Definitions</strong></p>

<p>[共享名]<br/>
comment = 任意字符串<br/>
说明：comment是对该共享的描述，可以是任意字符串。</p>

<p>path = 共享目录路径<br/>
说 明：path用来指定共享目录的路径。可以用%u、%m这样的宏来代替路径里的unix用户和客户机的Netbios名，用宏表示主要用于[homes] 共享域。例如：如果我们不打算用home段做为客户的共享，而是在/home/share/下为每个Linux用户以他的用户名建个目录，作为他的共享目 录，这样path就可以写成：path = /home/share/%u; 。用户在连接到这共享时具体的路径会被他的用户名代替，要注意这个用户名路径一定要存在，否则，客户机在访问时会找不到网络路径。同样，如果我们不是以用 户来划分目录，而是以客户机来划分目录，为网络上每台可以访问samba的机器都各自建个以它的netbios名的路径，作为不同机器的共享资源，就可以 这样写：path = /home/share/%m 。</p>

<p>browseable = yes/no<br/>
说明：browseable用来指定该共享是否可以浏览。</p>

<p>writable = yes/no<br/>
说明：writable用来指定该共享路径是否可写。</p>

<p>available = yes/no<br/>
说明：available用来指定该共享资源是否可用。</p>

<p>admin users = 该共享的管理者<br/>
说明：admin users用来指定该共享的管理员（对该共享具有完全控制权限）。在samba 3.0中，如果用户验证方式设置成“security=share”时，此项无效。<br/>
例如：admin users =david，sandy（多个用户中间用逗号隔开）。</p>

<p>valid users = 允许访问该共享的用户<br/>
说明：valid users用来指定允许访问该共享资源的用户。<br/>
例如：valid users = david，@dave，@tech（多个用户或者组中间用逗号隔开，如果要加入一个组就用“@组名”表示。）</p>

<p>invalid users = 禁止访问该共享的用户<br/>
说明：invalid users用来指定不允许访问该共享资源的用户。<br/>
例如：invalid users = root，@bob（多个用户或者组中间用逗号隔开。）</p>

<p>write list = 允许写入该共享的用户<br/>
说明：write list用来指定可以在该共享下写入文件的用户。<br/>
例如：write list = david，@dave</p>

<p>public = yes/no<br/>
说明：public用来指定该共享是否允许guest账户访问。</p>

<p>guest ok = yes/no<br/>
说明：意义同“public”。</p>

<p><strong>几个特殊共享：</strong></p>

<pre><code>[homes]
comment = Home Directories
browseable = no
writable = yes
valid users = %S
; valid users = MYDOMAIN\%S

[printers]
comment = All Printers
path = /var/spool/samba
browseable = no
guest ok = no
writable = no
printable = yes

[netlogon]
comment = Network Logon Service
path = /var/lib/samba/netlogon
guest ok = yes
writable = no
share modes = no

[Profiles]
path = /var/lib/samba/profiles
browseable = no
guest ok = yes
</code></pre>

<p>Samba安装好后，使用testparm命令可以测试smb.conf配置是否正确。使用<strong>testparm –v</strong>命令可以详细的列出smb.conf支持的配置参数。<br/>
默认的smb.conf有很多个选项和内容，比较繁琐，这里我们按照案例来讲解配置选项，先备份一下自己的smb.conf文件，然后重新建立一个smb.conf。</p>

<pre><code># cp -p /etc/samba/smb.conf    /etc/samba/smb.conf.bak
</code></pre>

<p><strong>使用案例</strong></p>

<p>现有一个工作组workgroup，需要添加samba服务器作为文件服务器，并发布共享目录/share，共享名为public，此共享目录允许所有员工访问。</p>

<h4>a. 修改samba的主配置文件如下：</h4>

<p>复制代码</p>

<pre><code># vi /etc/samba/smb.conf
#------------------------ Global Settings ---------------------------------

[global]        该设置与Samba服务整体运行环境有关，它的设置项目针对所有共享资源       

# ----------------------- Network Related Options -------------------------
#
# workgroup = NT-Domain-Name or Workgroup-Name, eg: MIDEARTH
#
# server string is the equivalent of the NT Description field
#
# netbios name can be used to specify a server name not tied to the hostname

    workgroup = WORKGROUP               #定义工作组，也就是windows中的工作组概念
    server string = David Samba Server Version %v   #定义Samba服务器的简要说明
    netbios name = SambaServer          #定义windows中显示出来的计算机名称

# ----------------------- Logging Options ---------------------------------
#
# Log File let you specify where to put logs and how to split them up.

    log file = /var/log/samba/log.%m        #定义Samba用户的日志文件，%m代表客户端主机名
                                                    #Samba服务器会在指定的目录中为每个登陆主机建立不同的日志文件
# ----------------------- Standalone Server Options ------------------------
#
# Scurity can be set to user, share(deprecated) or server(deprecated)

    security = share                #共享级别，用户不需要账号和密码即可访问

#============================ Share Definitions ==============================

[public]                    #设置针对的是共享目录个别的设置，只对当前的共享资源起作用
    comment = Public Stuff          #对共享目录的说明文件，自己可以定义说明信息
    path = /share               #用来指定共享的目录，必选项
    public = yes                #所有人可查看,等效于guest ok = yes
</code></pre>

<h4>b. 建立共享目录</h4>

<p>上面设置了共享目录为/share，下面就需要建立/share目录<br/>
由于要设置匿名用户可以下载或上传共享文件，所以要给/share目录授权为nobody权限。</p>

<pre><code># mkdir /share
# chown nobody:nobody /share
</code></pre>

<h4>c. 重启smb服务</h4>

<pre><code># /etc/init.d/smb restart
# /etc/init.d/nmb restart
</code></pre>

<h4>d. 测试smb.conf配置是否正确</h4>

<pre><code># testparm
</code></pre>

<p>使用useradd命令新建系统账户，然后再使用smbpasswd –a建立SMB账户。</p>

<pre><code># useradd *username*
# passwd *username*
# smbpasswd -a *username*
</code></pre>

<p><strong>Windown下访问方法</strong></p>

<p>在windows下通过“&#92;ip地址”的方式访问其它文件资源时，一般第一次需要输入密码，以后就无需输入密码直接登陆了，那么如果我们要切换到其它Samba用户怎么办呢？可以在windows下执行如下指令实现：</p>

<p>首先通过开始&ndash;>运行&ndash;>cmd 输入：“net use”命令查看现有的连接，然后执行“net use &#92;Samba服务器IP地址或者netbios名称\ipc$  /del”，删除Samba服务器已经建立的连接。或者执行“net use * /del”将现在所有的连接全部删除。最后，再次执行“&#92;ip地址”时，就可以切换用户了。</p>

<p><strong>Linux客户端访问操作</strong></p>

<p>上面介绍了windows客户端访问Samba服务器的操作，那么在Linux作为客户端时，查看其它Linux Samba服务器共享的文件时，应该如何操作呢？<br/>
这就要用到smbclient这个工具，系统默认自带了这个命令，Smbclient常见用法介绍如下：</p>

<p>1、查看Samba服务器的共享资料</p>

<pre><code># smbclient  –L  //Samba服务器的ip地址  -U  Samba用户名
</code></pre>

<p> “-L”即为list的含义，“-U”是user的意思，如果Samba服务器是无密码访问的话，可以省略“-U  Samba用户名”。<br/>
例如：samba需要密码登陆时，查看共享方法如下：</p>

<pre><code># smbclient  -L //10.0.0.1/public –U tian
</code></pre>

<p>Samba无密码访问时，执行如下命令：</p>

<pre><code># smbclient  -L //10.0.0.163/public
password: 直接回车即可。
</code></pre>

<p>2、登陆Samba服务器</p>

<p>如果需要在Linux客户端登陆Samba服务器，用法如下：</p>

<pre><code># smbclient  //Samba服务器的ip地址  -U  Samba用户名
</code></pre>

<p>请看下面执行的操作：</p>

<pre><code># smbclient //10.0.0.1/public -U tian
smb: \&gt; ?           在这里输入?即可查看在smb命令行可用的所有命令。
</code></pre>

<p>操作过程与登陆FTP服务器很类似，登陆Samba服务器后，就可以进行文件的上传与下载，如果有足够的权限，还可以进行修改文件操作。<br/>
此外，Samba服务器共享出来的文件还可以在Linux客户端进行挂载，这就要用到mount命令，如下所示：</p>

<pre><code># mount -t cifs -l //10.0.0.1/public /mnt/samba/
</code></pre>

<p>用户名和密码挂载    后面可以跟</p>

<pre><code># mount -t cifs -l //10.0.0.1/public /mnt/samba -o username=tian,password=paaswd
</code></pre>

<p>用root用户，编辑 vi /etc/fstab, 在最后面加入：</p>

<pre><code>//10.0.0.1/public /mnt/samba  smbfs  defaults,auto,username=tian,password=paaswd 0 0
</code></pre>

<p>这样linux机器重新启动都可以自动挂载windows上的共享目录</p>

<h2>五.Samba Web管理工具 SWAT</h2>

<p>SWAT(Samba WEB Administration Tool) 是通过浏览器对 Samba 进行管理的工具之一。通过 SWAT，可以在 Samba 允许访问范围内的客户端，用浏览器对服务端的 Samba 进行控制。在线文档的阅览、smb.conf 的确认和编辑，以及密码的变更、服务的重启等等都可以通过 SWAT 来完成，它的直观让 Samba 变得温和化，对那些不喜欢文本界面管理服务器的朋友来说，是一个强大的工具。</p>

<p>swat工具嵌套在xinetd超级守护进程中，要通过启用xinetd进程来启用swat。因此要先安装xinetd工具包，然后安装swat工具包。上面已经安装过samba-swat-3.5.10-125.el6.x86_64，这里不再赘述。</p>

<p>1.配置swat</p>

<p>因为swat是xinetd超级守护进程的一个子进程，所以swat工具配置文件在xinetd目录中。我们要设置swat配置文件，开启此子进程，以便在启用xinetd进程是来启用swat。swat配置文件在/etc/xinetd.d目录中。</p>

<p>打开并编辑 /etc/xinetd.d/swat</p>

<pre><code># vi /etc/xinetd.d/swat
# default: off
# description: SWAT is the Samba Web Admin Tool. Use swat \
#              to configure your Samba server. To use SWAT, \
#              connect to port 901 with your favorite web browser.
service swat
{
    port            = 901       #swat默认使用tcp的901端口, 可以修改
    socket_type     = stream        #通过web来配置samba, 默认使用root账号进入, 可以修改成其他的系统用户
    wait            = no
    only_from       = 127.0.0.1              
    only_from       = 10.0.0.0      #添加此行, 将“only_from=127.0.0.1”改成“only_from=10.0.0.0”, 只允许内网范围对SWAT进行访问
    user            = root
    server          = /usr/sbin/swat    #swat的执行程序默认在/usr/sbin目录下
    log_on_failure  += USERID
    disable         = yes       #将“disable=yes”改成“disable=no”, 这样swat子进程就可以随xinetd超级守护进程一起启动了
}
</code></pre>

<p>2.启动 swat<br/>
因为swat是xinetd的子进程，所以只要启用了xinetd，那么swat也就会伴随xinetd启动。</p>

<pre><code># service xinetd restart
</code></pre>

<p>3.打开 swat<br/>
在服务端启动 swat后，我们就可以通过 swat允许范围内的客户机的浏览器中，通过 &ldquo;<a href="http://%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E7%BD%91IP:901">http://%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%86%85%E7%BD%91IP:901</a>&rdquo; 来访问服务端的 swat了，输入 root用户的用户名及密码进入 swat的管理首页，<br/>
通过 swat管理 Samba 与直接修改 smb.conf 的方式，在本质上并无差异，但通过浏览器访问的方式，可以使 Samba 的管理更加温和化，更加适用于不擅长使用文本界面、直接修改配置文件的朋友。</p>

<p>4.通过swat配置samba<br/>
在swat页面我们可以看到有8个选项，每个选项可以配置samba的不同功能。<br/>
HOME：Samba相关程序及文件说明。<br/>
GLOBALS：设置Samba的全局参数。即smb.conf文件的[global]。<br/>
SHARES：设置Samba的共享参数。<br/>
PRINTERS：设置Samba的打印参数。<br/>
WIZARD：Samba配置向导。<br/>
STATUS：查看和设置Samba的服务状况。<br/>
VIEW：查看Samba的文本配置文件，即smb.conf。<br/>
PASSWORD：设置Samba用户，可以修改密码，新建删除用户。</p>

<p>接下来在浏览器中输入 <a href="http://127.0.0.1:901">http://127.0.0.1:901</a> 输入root用户名密码即可访问</p>

<p><a href="http://blog.blackroom.cn/blog/2013/04/05/samba-web-modify-password.markdown">让Samba用户通过WEB页面修改密码</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ulimit打开的文件和用户名进程]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/01/28/ulimitda-kai-de-wen-jian-he-yong-hu-ming-jin-cheng/"/>
    <updated>2013-01-28T16:13:10+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/01/28/ulimitda-kai-de-wen-jian-he-yong-hu-ming-jin-cheng</id>
    <content type="html"><![CDATA[<p>如何提高Linux的/ Centos的/ RHEL的ulimit打开的文件和用户进程</p>

<!-- more -->


<p>vi /etc/sysctl.conf</p>

<pre><code>fs.file-max = 65536
</code></pre>

<p>增加linux最大用户进程</p>

<p>vi /etc/security/limits.conf</p>

<pre><code>*   soft    nproc   65535
*   hard    nproc   65535
*   soft    nofile  65535
*   hard    nofile  65535
</code></pre>

<p>增加linux针对用户的最大进程文件的限制</p>

<p>vi /etc/security/limits.d/90-nproc.conf</p>

<pre><code>*   soft    nproc   65535
*   hard    nproc   65535
*   soft    nofile  65535
*   hard    nofile  65535
</code></pre>

<p>保存并退出查看linux用户最大进程或文件句柄限制</p>

<p>[root@localhost# ulimit -a</p>

<pre><code>core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 127358
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 65535
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 10240
cpu time               (seconds, -t) unlimited
max user processes              (-u) 65535
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
</code></pre>

<p>如果没有更改重启系统即可</p>

<p>imits.conf 文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，而且只针对于单个会话。</p>

<p>limits.conf的格式如下：<br/>
username|@groupname type resource limit<br/>
username|@groupname：</p>

<p>设置需要被限制的用户名，组名前面加@和用户名区别，也可以用通配符*来做所有用户的限制。
type：有 soft，hard 和 -，<br/>
soft 指的是当前系统生效的设置值。<br/>
hard 表明系统中所能设定的最大值。<br/>
soft 的限制不能比hard 限制高。<br/>
用 - 就表明同时设置了 soft 和 hard 的值。</p>

<pre><code>resource：
core - 限制内核文件的大小
date - 最大数据大小
fsize - 最大文件大小
memlock - 最大锁定内存地址空间
nofile - 打开文件的最大数目
rss - 最大持久设置大小
stack - 最大栈大小
cpu - 以分钟为单位的最多 CPU 时间
noproc - 进程的最大数目
as - 地址空间限制
maxlogins - 此用户允许登录的最大数目
</code></pre>

<p>要使 limits.conf 文件配置生效，必须要确保 pam_limits.so 文件被加入到启动文件中。查看 /etc/pam.d/login 文件中有：<br/>
session required /lib/security/pam_limits.so</p>

<p>例如：修改文件描述符大小(65536)</p>

<p>vi  /etc/security/limits.conf</p>

<pre><code>*   soft    nofile  65536  
*   hard    nofile  65536
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Markdown: 基础 （快速入门）]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/01/25/markdown-ji-chu-(kuai-su-ru-men-)/"/>
    <updated>2013-01-25T13:06:26+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/01/25/markdown-ji-chu-(kuai-su-ru-men-)</id>
    <content type="html"><![CDATA[<p>Markdown 其实很简单就可以上手，此文档提供了一些使用范例，用作备忘。</p>

<!-- more -->


<h2>段落、标题、区块代码</h2>

<p>一个段落是由一个以上的连接的行句组成，而一个以上的空行则会划分出不同的段落（空行的定义是显示上看起来像是空行，就被视为空行，例如有一行只有空白和 tab，那该行也会被视为空行），一般的段落不需要用空白或换行缩进。</p>

<p>单个回车视为空格。连续回车才能分段。行尾加两个空格，即可段内换行。</p>

<p>显示如下代码框只需要在文字前面添加四个空格或者是一个<code>&lt;tab&gt;</code>即可</p>

<pre><code>显示当前代码框只需要在文字前面添加四个空格或者是一个tab即可
</code></pre>

<p>Markdown 支持两种标题的语法，Setext 和 atx 形式。<br/>
Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题）。</p>

<pre><code>第一阶标题
===========
</code></pre>

<h1>第一阶标题</h1>

<pre><code>第二阶标题
----------
</code></pre>

<h2>第二阶标题</h2>

<p>Atx 形式在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶。</p>

<pre><code>#第一阶标题  
</code></pre>

<h1>第一阶标题</h1>

<pre><code>##第二阶标题  
</code></pre>

<h2>第二阶标题</h2>

<pre><code>###第三阶标题  
</code></pre>

<h3>第三阶标题</h3>

<p>……</p>

<pre><code>######第六阶标题  
</code></pre>

<h6>第六阶标题</h6>

<p>区块引用则使用 email 形式的 &lsquo;>&rsquo; 角括号。</p>

<pre><code>&gt; 此处是区块引用  
</code></pre>

<blockquote><p>此处是区块引用</p></blockquote>

<h2>修辞和强调</h2>

<p>Markdown 使用星号和底线来标记需要强调的区段。</p>

<pre><code>*首尾各一个*号这些文字显示为斜体*  
</code></pre>

<p><em>首尾各一个星号这些文字显示为斜体</em></p>

<pre><code>**首尾各两个*号这些文字显示为粗体**  
</code></pre>

<p><strong>首尾各两个星号这些文字显示为粗体</strong></p>

<pre><code>***首尾各三个*号这些文字显示为斜体加粗体***  
</code></pre>

<p><strong><em>首尾各三个星号这些文字显示为斜体加粗体</em></strong></p>

<pre><code>_首尾使用底线强调区段_  
</code></pre>

<p><em>首尾使用底线强调区段</em></p>

<h2>列表</h2>

<p>无序列表使用星号、加号和减号来做为列表的项目标记，这些符号是都可以使用的.</p>

<p>星号：</p>

<pre><code>* Candy.
* Gum.
* Booze.  
</code></pre>

<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>


<p>加号：</p>

<pre><code>+ Candy.
+ Gum.
+ Booze.  
</code></pre>

<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>


<p>和减号：</p>

<pre><code>- Candy.
- Gum.
- Booze.  
</code></pre>

<ul>
<li>Candy.</li>
<li>Gum.</li>
<li>Booze.</li>
</ul>


<p>有序的列表则是使用一般的数字接着一个英文句点作为项目标记：</p>

<pre><code>1. Red
2. Green
3. Blue  
</code></pre>

<ol>
<li>Red</li>
<li>Green</li>
<li><p>Blue</p>

<p> 如果你在项目之间插入空行，那项目的内容会用 <p> 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。<br/>
如果你在项目之间插入空行，那项目的内容会用 <p> 包起来，你也可以在一个项目内放上多个段落，只要在它前面缩排 4 个空白或 1 个 tab 。</p></li>
</ol>


<hr />

<p>上面是一条横线</p>

<pre><code>---
上面是一条横线
</code></pre>

<p>两个列表之间不能相邻，否则会解释为嵌套的列表</p>

<pre><code>- 外层列表项目
 + 内层列表项目
 + 内层列表项目
 + 内层列表项目
- 外层列表  
</code></pre>

<ul>
<li>外层列表项目</li>
<li>内层列表项目</li>
<li>内层列表项目</li>
<li>内层列表项目</li>
<li>外层列表</li>
</ul>


<p>项目Markdown 支援两种形式的链接语法： 行内 和 参考 两种形式，两种都是使用角括号来把文字转成连结。</p>

<p>行内形式是直接在后面用括号直接接上链接：</p>

<pre><code>This is an [example link](http://example.com/).
</code></pre>

<p>This is an <a href="http://example.com/">example link</a>.</p>

<p>你也可以选择性的加上 title 属性</p>

<pre><code>This is an [example link](http://example.com/ "With a Title").
</code></pre>

<p>This is an <a href="http://example.com/" title="With a Title">example link</a>.</p>

<p>参考形式的链接让你可以为链接定一个名称，之后你可以在文件的其他地方定义该链接的内容：</p>

<pre><code>I get 10 times more traffic from [Google][1] than from
[Yahoo][2] or [MSN][3].

[1]: http://google.com/ "Google"
[2]: http://search.yahoo.com/ "Yahoo Search"
[3]: http://search.msn.com/ "MSN Search"
</code></pre>

<p>I get 10 times more traffic from <a href="http://google.com/" title="Google">Google</a> than from
<a href="http://search.yahoo.com/" title="Yahoo Search">Yahoo</a> or <a href="http://search.msn.com/" title="MSN Search">MSN</a>.</p>

<p>title 属性是选择性的，链接名称可以用字母、数字和空格，但是不分大小写：</p>

<pre><code>I start my morning with a cup of coffee and
[The New York Times][NY Times].

[ny times]: http://www.nytimes.com/
</code></pre>

<p>I start my morning with a cup of coffee and
<a href="http://www.nytimes.com/">The New York Times</a>.</p>

<h2>图片</h2>

<p>图片的语法和链接很像。</p>

<p>行内形式（title 是选择性的）：</p>

<pre><code>![alt text](/path/to/img.jpg "Title")
</code></pre>

<p>参考形式：</p>

<pre><code>![alt text][id]

[id]: /path/to/img.jpg "Title"
</code></pre>

<h2>代码</h2>

<p>在一般的段落文字中，你可以使用反引号 ` 来标记代码区段，区段内的 &amp;、&lt; 和 > 都会被自动的转换成 HTML 实体，这项特性让你可以很容易的在代码区段内插入 HTML 码：</p>

<pre><code>I strongly recommend against using any `&lt;blink&gt;` tags.

I wish SmartyPants used named entities like `&amp;mdash;`
instead of decimal-encoded entites like `&amp;#8212;`.  
</code></pre>

<p>I strongly recommend against using any <code>&lt;blink&gt;</code> tags.</p>

<p>I wish SmartyPants used named entities like <code>&amp;mdash;</code>
instead of decimal-encoded entites like <code>&amp;#8212;</code>.</p>

<p>如果要建立一个已经格式化好的代码区块，只要每行都缩进 4 个空格或是一个 tab 就可以了，而 &amp;、&lt; 和 > 也一样会自动转成 HTML 实体。</p>

<p>Markdown 语法:</p>

<pre><code>If you want your page to validate under XHTML 1.0 Strict,
you've got to put paragraph tags in your blockquotes:

&lt;blockquote&gt;
&lt;p&gt;For example.&lt;/p&gt;
&lt;/blockquote&gt;  
</code></pre>

<p>If you want your page to validate under XHTML 1.0 Strict,
you&rsquo;ve got to put paragraph tags in your blockquotes:</p>

<blockquote>
<p>For example.</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用octopress部署博客到github]]></title>
    <link href="http://blog.blackroom.cn/blog/2013/01/20/li-yong-octopressbu-shu-bo-ke-dao-github/"/>
    <updated>2013-01-20T11:01:31+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2013/01/20/li-yong-octopressbu-shu-bo-ke-dao-github</id>
    <content type="html"><![CDATA[<p>这里将详细讲解一下如何利用octopress在github上部署一个博客程序，既方便写博客又无需考虑托管问题，同时天然的在本地有一个备份，所有操作都基于git，有无限版本控制。使用markdown书写具体的博客内容，自带代码高亮解决方案。</p>

<p> <!-- more -->
github使用的博客引擎是Jekyll，octopress也是利用Jekyll引擎来开发博客的，因此生成的博客系统可以直接在github pages上运行良好。</p>

<p>环境说明:</p>

<p>本地环境是在ubuntu14.04.1系统下部署的，其他系统也没问题，只需要支持ruby，git</p>

<h2>1.Ruby等依赖安装</h2>

<p>Ruby 需要高于或等于1.9.3版本的，同时由于Jekyll和octopress都是ruby写的，会有诸多ruby依赖，建议切换ruby源为国内源。对于git版本没有太大要求。</p>

<p><strong>Install Ruby</strong></p>

<pre><code>sudo apt-get install ruby
</code></pre>

<p>查看ruby版本方法如下</p>

<pre><code>ruby --version
</code></pre>

<p><strong>Install bundler</strong></p>

<p>bundle可以自动解决依赖，安装方法如下：</p>

<pre><code>sudo apt-get  install bundler
</code></pre>

<p><strong>Install git</strong></p>

<p>默认ubuntu14.04已经自带有安装git，如果没有安装git，请自行安装<a href="http://git-scm.com/">git</a></p>

<p>查看git的版本</p>

<pre><code>git --version
$git version 1.9.1
</code></pre>

<p>安装git</p>

<p>sudo apt-get install git</p>

<h2>2.octopress安装</h2>

<p>octopress 的安装也比较简单，下载源码后会有Gemfile文件来指示所有依赖，使用bundle即可。</p>

<p>下载源码</p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress
</code></pre>

<p><strong>安装octopress</strong></p>

<p>使用bundle自动安装,执行命令<em>bundle install</em>就会自动安装所有octopress及其所有依赖。</p>

<pre><code>bundle install
</code></pre>

<p>注意： 如果上面的命令执行失败，提示下面的错误：</p>

<pre><code>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
/usr/bin/ruby1.9.1 extconf.rb 
/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require': cannot load such file -- mkmf   (LoadError)
</code></pre>

<p>请执行下面的命令安装ruby1.9.1-dev</p>

<pre><code>sudo apt-get install ruby1.9.1-dev
</code></pre>

<p><strong>安装octopress默认主题</strong></p>

<pre><code>rake install
</code></pre>

<p>在octopress根目录下的Rakefile定义了如何将octopress跟Jekyll连接起来，rake打包了一些常见的如发布博客主题、生成博客数据、发布博客等一系列命令来简化博主的操作。直接使用Jekyll每一个任务都需要不少命令和文件编辑。</p>

<p><strong>tips： 保持Jekyll最新</strong></p>

<p>由于Jekyll更新比较频繁，为了确保你在本地调试的时候看到的网站效果跟GitHub Pages上的一致，务必时常更新Jekyll，推荐使用bundle更新，命令如下：</p>

<pre><code>bundle update
</code></pre>

<h2>3.octopress配置</h2>

<p>实际上octopress已经很好的隐藏了Jekyll的诸多配置，我们只需要简单操作几个文件。octopress就会自动生成相应的Jekyll配置。这里我们仅仅讲解一下_config.yml文件的部分配置项，具体请看官网<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a>。</p>

<p>该文件的配置分为三大部分:Main config、Jekyll&amp;Plugin、3rd Party Settings。</p>

<p>Main config</p>

<pre><code>url:                # For rewriting urls for RSS, etc  
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
description:        # A default meta description for your site
date_format:        # Format dates using Ruby's date strftime syntax
subscribe_rss:      # Url for your blog's feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
email:              # Email address for the RSS feed if you want it.
</code></pre>

<p>注释说明已经很详细了，有一点需要强调的是，<strong><em>如果你想启用自己的域名来访问，这里的url务必修改为你自己的域名，否则即便你添加了CNAME文件，使用rake部署的时候也不会部署该CNAME文件。</em></strong></p>

<p><em>建议：</em></p>

<blockquote><p>最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。涉及到的文件比较多，小心删除，如果以发表博客，_deploy目录下无需手动删除，重新生成博客后会自动删除。同理，修改定制文件/source/<em>includes/custom/head.html, source/</em>includes/head.html把google的自定义字体去掉。</p></blockquote>

<h2>4.部署到github</h2>

<p>github pages支持托管，地址为<a href="https://pages.github.com/">https://pages.github.com/</a>。在这个页面你只需要大概了解一下什么事github page，如何申请就行了。</p>

<p>新建一个仓库，名为your_user_name.github.io，当然也可以是project，这个方法有点不一样，这里以your_user_name.github.io为例。</p>

<p>在octopress根目录执行 rake setup_github_pages ，按照要求输入仓库地址等，这个命令会在跟目录下新建_deploy目录，这个会push到仓库的master分支，也就是访问博客的文件。</p>

<pre><code>rake setup_github_pages
Enter the read/write url for your repository
(For example, 'git@github.com:your_username/your_username.github.io.git)
    or 'https://github.com/your_username/your_username.github.io')
Repository url: 
</code></pre>

<p>生成博客， <em>rake generate</em> 这个会按照既定规则生成静态文件的博客。</p>

<pre><code>rake generate
</code></pre>

<p>发布博客， <em>rake deploy</em> 将前一步生成的静态文件拷贝到_deploy目录并push到github</p>

<pre><code>rake deploy
</code></pre>

<p><strong>注意：</strong></p>

<p>第一次执行 <em>rake deploy</em> 的时候会报错如下：</p>

<pre><code>! [rejected]        master -&gt; master (non-fast-forward)
error: failed to push some refs to 'https://github.com/blackroom/blackroom.github.com.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</code></pre>

<p>解决方法是手动进入_deploy目录手动强制push一次。</p>

<pre><code>cd octopress/_deploy
git push origin +master
cd ..
rake deploy
</code></pre>

<p>这样再次执行就不会报错了。</p>

<p><strong>博客本地预览</strong></p>

<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入 <em>rake preview</em> 命令，然后就能在浏览器中进行本地预览访问了：&#8221;<a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a>&ldquo;或&#8221;<a href="http://localhost:4000/">http://localhost:4000/</a>&#8220;，效果跟仓库的一样。</p>

<pre><code>rake preview
</code></pre>

<p><strong>提交源码用于备份</strong></p>

<p>前面提到的deploy只是部署博客代码到github上面，整个octopress并没有提交，为了保证在任何地方随时发布博客，而无需再次详细配置以保证跟github上的最新代码一致，可以将当前octopress的源码存放到github的source分支下：</p>

<pre><code>git commit -am 'Initial source commit'
git push origin source
</code></pre>

<h2>5.新建博文</h2>

<p>新建博文也非常简单，octopress已经预定义了脚本 <em>rake new_post[&ldquo;title&rdquo;]</em> 方便我们操作，因为Jekyll有一套固定的文档路径以及命名规范，需要按照它的规定来实现才能成功生成博文。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<pre><code>rake new_post["title"]
</code></pre>

<p>new_post执行后会自动新建博文，并在相应的markdown文件中写入yaml元数据。</p>

<pre><code>---
layout: post
title: "title"
date: 2013-01-20 16:36
comments: true
categories: 
---
</code></pre>

<p>这里的categories是自定义的分类名，支持的定义方式如下：</p>

<pre><code>#One category
categories: Sass
#Multiple categories example 1
categories: [CSS3, Sass, Media Queries]
#Multiple categories example 2
categories:
- CSS3
- Sass
- Media Queries
</code></pre>

<p>除此之外，还支持 <em>author: Your Name</em> 来指明作者，支持 <em>published: false</em> 表明当前博文是草稿暂时不发布。</p>

<p><strong>发布博文完整流程：</strong></p>

<pre><code>rake new_post["New Post"]
edit the file source/_posts/{DATETIME}-New-Post.markdown
rake generate
git commit -am "Some comment here." 
git push origin source
rake deploy
</code></pre>

<p><strong>新建页面</strong></p>

<p>你可以在博客源目录下任意地方添加页面，Jekyll会自动拼接，对应的url地址也会根据页面路径自动生成 ，如果要添加 about.markdown ，那么就会生成 site.com/about.html ，如果你想要的url地址是 site.com/about/ ,你需要新建的页面应该是 about/index.markdown .同样的，octopress也有脚本完成这个操作。</p>

<pre><code>rake new_page[super-awesome]
$creates /source/super-awesome/index.markdown

rake new_page[super-awesome/page.html]
$creates /source/super-awesome/page.html
</code></pre>

<p>像发布博文一样，默认后缀依然是markdown，但是你可以再Rakefile中修改这个默认配置；一个干净的页面文件如下：</p>

<pre><code>---
layout: page
title: "Super Awesome"
date: 2013-01-20 5:59
comments: true
sharing: true
footer: true
---
</code></pre>

<p>这里的title来自于文件名。你也可以手动修改。跟博文的一样，除了不包含分类 categories，对于 sharing 和 comments 你可以关闭，对于 footer 你可以删除，这样就不会添加默认的footer信息到该页面；如果你不像要再页面中显示日期，可以删除这里的 date 。</p>

<p><strong>内容</strong></p>

<p>页面和博文会调用markup 引擎渲染，默认引擎是再配置文件中；此外，你可以使用任何Jekyll docs中所介绍的模板特性。</p>

<p>默认首页是显示全文，要想仅仅显示摘要，请在合适的地方插入下面的代码</p>

<pre><code>&lt;!-- more --&gt;
</code></pre>

<p>这个会生成一个”Continue →” 链接来指向完整博文，这个跟wordpress的一样。</p>

<p><a href="http://blog.blackroom.cn/blog/2013/01/25/markdown-ji-chu-(kuai-su-ru-men-)/" title="Markdown: 基础">Markdown: 基础 （快速入门）</a></p>
]]></content>
  </entry>
  
</feed>
