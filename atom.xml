<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[BLACKROOM]]></title>
  <link href="http://blog.blackroom.cn/atom.xml" rel="self"/>
  <link href="http://blog.blackroom.cn/"/>
  <updated>2015-01-20T14:32:43+08:00</updated>
  <id>http://blog.blackroom.cn/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ulimit打开的文件和用户名进程]]></title>
    <link href="http://blog.blackroom.cn/blog/2015/01/20/ulimitda-kai-de-wen-jian-he-yong-hu-ming-jin-cheng/"/>
    <updated>2015-01-20T12:13:10+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2015/01/20/ulimitda-kai-de-wen-jian-he-yong-hu-ming-jin-cheng</id>
    <content type="html"><![CDATA[<p>如何提高Linux的/ Centos的/ RHEL的ulimit打开的文件和用户进程</p>

<!-- more -->


<p>vi /etc/sysctl.conf</p>

<pre><code>fs.file-max = 65536
</code></pre>

<p>增加linux最大用户进程</p>

<p>vi /etc/security/limits.conf</p>

<pre><code>*   soft    nproc   65535
*   hard    nproc   65535
*   soft    nofile  65535
*   hard    nofile  65535
</code></pre>

<p>增加linux针对用户的最大进程文件的限制</p>

<p>vi /etc/security/limits.d/90-nproc.conf</p>

<pre><code>*   soft    nproc   65535
*   hard    nproc   65535
*   soft    nofile  65535
*   hard    nofile  65535
</code></pre>

<p>保存并退出查看linux用户最大进程或文件句柄限制</p>

<p>[root@localhost# ulimit -a</p>

<pre><code>core file size          (blocks, -c) 0
data seg size           (kbytes, -d) unlimited
scheduling priority             (-e) 0
file size               (blocks, -f) unlimited
pending signals                 (-i) 127358
max locked memory       (kbytes, -l) 64
max memory size         (kbytes, -m) unlimited
open files                      (-n) 65535
pipe size            (512 bytes, -p) 8
POSIX message queues     (bytes, -q) 819200
real-time priority              (-r) 0
stack size              (kbytes, -s) 10240
cpu time               (seconds, -t) unlimited
max user processes              (-u) 65535
virtual memory          (kbytes, -v) unlimited
file locks                      (-x) unlimited
</code></pre>

<p>如果没有更改重启系统即可</p>

<p>imits.conf 文件实际是 Linux PAM（插入式认证模块，Pluggable Authentication Modules）中 pam_limits.so 的配置文件，而且只针对于单个会话。</p>

<p>limits.conf的格式如下：<br/>
username|@groupname type resource limit<br/>
username|@groupname：</p>

<p>设置需要被限制的用户名，组名前面加@和用户名区别，也可以用通配符*来做所有用户的限制。
type：有 soft，hard 和 -，<br/>
soft 指的是当前系统生效的设置值。<br/>
hard 表明系统中所能设定的最大值。<br/>
soft 的限制不能比hard 限制高。<br/>
用 - 就表明同时设置了 soft 和 hard 的值。</p>

<pre><code>resource：
core - 限制内核文件的大小
date - 最大数据大小
fsize - 最大文件大小
memlock - 最大锁定内存地址空间
nofile - 打开文件的最大数目
rss - 最大持久设置大小
stack - 最大栈大小
cpu - 以分钟为单位的最多 CPU 时间
noproc - 进程的最大数目
as - 地址空间限制
maxlogins - 此用户允许登录的最大数目
</code></pre>

<p>要使 limits.conf 文件配置生效，必须要确保 pam_limits.so 文件被加入到启动文件中。查看 /etc/pam.d/login 文件中有：<br/>
session required /lib/security/pam_limits.so</p>

<p>例如：修改文件描述符大小(65536)</p>

<p>vi  /etc/security/limits.conf</p>

<pre><code>*   soft    nofile  65536  
*   hard    nofile  65536
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[利用octopress部署博客到github]]></title>
    <link href="http://blog.blackroom.cn/blog/2015/01/20/li-yong-octopressbu-shu-bo-ke-dao-github/"/>
    <updated>2015-01-20T11:01:31+08:00</updated>
    <id>http://blog.blackroom.cn/blog/2015/01/20/li-yong-octopressbu-shu-bo-ke-dao-github</id>
    <content type="html"><![CDATA[<p>这里将详细讲解一下如何利用octopress在github上部署一个博客程序，既方便写博客又无需考虑托管问题，同时天然的在本地有一个备份，所有操作都基于git，有无限版本控制。使用markdown书写具体的博客内容，自带代码高亮解决方案。</p>

<p> <!-- more -->
github使用的博客引擎是Jekyll，octopress也是利用Jekyll引擎来开发博客的，因此生成的博客系统可以直接在github pages上运行良好。</p>

<p>环境说明:</p>

<p>本地环境是在ubuntukylin14.04.1系统下部署的，其他系统也没问题，只需要支持ruby，git</p>

<p>本文主要参照octopress官网和破船之家的教程写的。</p>

<p>目录</p>

<p>Ruby等依赖安装
octopress安装
octopress配置
部署到github
发布博客
小结
1.Ruby等依赖安装</p>

<p>Ruby 需要1.9.3版本的，同时由于Jekyll和octopress都是ruby写的，会有诸多ruby依赖，建议切换ruby源为国内源。对于git版本没有太大要求。</p>

<p>Install Ruby</p>

<p>查看ruby版本方法如下</p>

<p>ruby &ndash;version
如果版本符合要求则进入下一步，否则请参照官方手册安装ruby或者使用RVM来安装。</p>

<p>安装bundler</p>

<p>bundle可以自动解决依赖，安装方法如下：</p>

<p>gem install bundler
建议国内用户切换gem源为国内源，方法如下：</p>

<p>删除官方源
gem source -r <a href="https://rubygems.org/">https://rubygems.org/</a>
添加淘宝源
gem source -a <a href="http://ruby.taobao.org/">http://ruby.taobao.org/</a>
查看当前源
gem source -l
安装git</p>

<p>如果已经安装git，执行命令返回值为具体版本，否则请自行安装git</p>

<p>git &ndash;version
git version 1.9.1
2.octopress安装</p>

<p>octopress 的安装也比较简单，下载源码后会有Gemfile文件来指示所有依赖，使用bundle即可。</p>

<p>下载源码</p>

<p>git clone git://github.com/imathis/octopress.git octopress
cd octopress
安装octopress</p>

<p>使用bundle自动安装，将下面的内容写入文件Gemfile中放在站点仓库根目录下</p>

<p>source &ldquo;<a href="http://ruby.taobao.org">http://ruby.taobao.org</a>&rdquo;
gem &lsquo;github-pages&rsquo;
这样执行命令bundle install就会自动安装所有octopress及其所有依赖。</p>

<p>注意： 如果上面的命令执行失败，提示下面的错误：</p>

<p>Gem::Installer::ExtensionBuildError: ERROR: Failed to build gem native extension.
/usr/bin/ruby1.9.1 extconf.rb
/usr/lib/ruby/1.9.1/rubygems/custom_require.rb:36:in `require&#8217;: cannot load such file &ndash; mkmf   (LoadError)
请执行下面的命令安装ruby1.9.1-dev</p>

<p>sudo apt-get install ruby1.9.1-dev
安装octopress默认主题</p>

<p>rake install
在octopress根目录下的Rakefile定义了如何将octopress跟Jekyll连接起来，rake打包了一些常见的如发布博客主题、生成博客数据、发布博客等一系列命令来简化博主的操作。直接使用Jekyll每一个任务都需要不少命令和文件编辑。</p>

<p>tips： 保持Jekyll最新</p>

<p>由于Jekyll更新比较频繁，为了确保你在本地调试的时候看到的网站效果跟GitHub Pages上的一致，务必时常更新Jekyll，推荐使用bundle更新，命令如下：</p>

<p>bundle update
3.octopress配置</p>

<p>实际上octopress已经很好的隐藏了Jekyll的诸多配置，我们只需要简单操作几个文件。octopress就会自动生成相应的Jekyll配置。这里我们仅仅讲解一下_config.yml文件的部分配置项，具体请看官网Configuring Octopress。</p>

<p>该文件的配置分为三大部分:Main config、Jekyll&amp;Plugin、3rd Party Settings。</p>

<p>Main config</p>

<p>url:                # For rewriting urls for RSS, etc<br/>
title:              # Used in the header and title tags
subtitle:           # A description used in the header
author:             # Your name, for RSS, Copyright, Metadata
simple_search:      # Search engine for simple site search
description:        # A default meta description for your site
date_format:        # Format dates using Ruby&rsquo;s date strftime syntax
subscribe_rss:      # Url for your blog&rsquo;s feed, defauts to /atom.xml
subscribe_email:    # Url to subscribe by email (service required)
category_feeds:     # Enable per category RSS feeds (defaults to false in 2.1)
email:              # Email address for the RSS feed if you want it.
注释说明已经很详细了，有一点需要强调的是，如果你想启用自己的域名来访问，这里的url务必修改为你自己的域名，否则即便你添加了CNAME文件，使用rake部署的时候也不会部署该CNAME文件。</p>

<p>建议：</p>

<p>最好把里面的twitter相关的信息全部删掉，否则由于GFW的原因，将会造成页面load很慢。涉及到的文件比较多，小心删除，如果以发表博客，<em>deploy目录下无需手动删除，重新生成博客后会自动删除。
同理，修改定制文件/source/</em>includes/custom/head.html 把google的自定义字体去掉。from唐巧的博文中—配置
关于另外两部分配置后面会有文详细介绍，这里略过。</p>

<p>4.部署到github</p>

<p>github pages支持托管，地址为&#8217;<a href="https://pages.github.com/">https://pages.github.com/</a>&lsquo;。在这个页面你只需要大概了解一下什么事github page，如何申请就行了。</p>

<p>新建一个仓库，名为your_user_name.github.io或organization.github.io，当然也可以是project，这个方法有点不一样，这里以your_user_name.github.io为例。
在octopress根目录执行 rake setup_github_pages ，按照要求输入仓库地址等，这个命令会在跟目录下新建<em>deploy目录，这个会push到仓库的master分支，也就是访问博客的文件。
生成博客， rake generate 这个会按照既定规则生成静态文件的博客。
发布博客， rake deploy 将前一步生成的bo9ke拷贝到</em>deploy目录并push到github
注意：</p>

<p>第一次执行 rake deploy 的时候会报错如下：</p>

<p>! [rejected]        master -> master (non-fast-forward)
error: failed to push some refs to &lsquo;<a href="https://github.com/blackroom/blackroom.github.com.git">https://github.com/blackroom/blackroom.github.com.git</a>&rsquo;
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. &lsquo;git pull&rsquo;)
hint: before pushing again.
hint: See the &lsquo;Note about fast-forwards&rsquo; in &lsquo;git push &ndash;help&rsquo; for details.
解决方法是手动进入_deploy目录手动强制push一次。</p>

<p>cd octopress/_deploy
git pull origin +master
cd ..
rake deploy
这样再次执行就不会报错了。</p>

<p>博客本地预览</p>

<p>如果在部署到仓库之前，需要先预览一下博客，可以在终端输入 rake preview 命令，然后就能在浏览器中进行本地预览访问了：&#8217; <a href="http://127.0.0.1:4000/">http://127.0.0.1:4000/</a>&lsquo;或&#8217;<a href="http://localhost:4000/">http://localhost:4000/</a>&#8216;，效果跟仓库的一样。</p>

<p>提交源码用于备份</p>

<p>前面提到的deploy只是部署博客代码到github上面，整个octopress并没有提交，为了保证在任何地方随时发布博客，而无需再次详细配置以保证跟github上的最新代码一致，可以将当前octopress的源码存放到github的source分支下：</p>

<p>git add .
git commit -m &lsquo;Initial source commit&rsquo;
git push origin source
5.新建博文</p>

<p>新建博文也非常简单，octopress已经预定义了脚本 rake new_post[&ldquo;title&rdquo;] 方便我们操作，因为Jekyll有一套固定的文档路径以及命名规范，需要按照它的规定来实现才能成功生成博文。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。</p>

<p>new_post执行后会自动新建博文，并在相应的markdown文件中写入yaml元数据。</p>

<hr />

<p>layout: post
title: &ldquo;title&rdquo;
date: 2013-08-03 16:36
comments: true</p>

<h2>categories: </h2>

<p>这里的categories是自定义的分类名，支持的定义方式如下：</p>

<p> One category
categories: Sass
 Multiple categories example 1
categories: [CSS3, Sass, Media Queries]
 Multiple categories example 2
categories:
 CSS3
 Sass
 Media Queries
除此之外，还支持 author: Your Name 来指明作者，支持 published: false 表明当前博文是草稿暂时不发布。</p>

<p>发布博文完整流程：</p>

<p>rake new_post[&ldquo;New Post&rdquo;]
edit the file source/_posts/{DATETIME}-New-Post.markdown
rake generate
git add .
git commit -am &ldquo;Some comment here.&rdquo;
git push origin source
rake deploy
新建页面</p>

<p>你可以在博客源目录下任意地方添加页面，Jekyll会自动拼接，对应的url地址也会根据页面路径自动生成 ，如果要添加 about.markdown ，那么就会生成 site.com/about.html ，如果你想要的url地址是 site.com/about/ ,你需要新建的页面应该是 about/index.markdown .同样的，octopress也有脚本完成这个操作。</p>

<p>rake new_page[super-awesome]
 creates /source/super-awesome/index.markdown</p>

<p>rake new_page[super-awesome/page.html]
 creates /source/super-awesome/page.html
像发布博文一样，默认后缀依然是markdown，但是你可以再Rakefile中修改这个默认配置；一个干净的页面文件如下：</p>

<hr />

<p>layout: page
title: &ldquo;Super Awesome&rdquo;
date: 2011-07-03 5:59
comments: true
sharing: true</p>

<h2>footer: true</h2>

<p>这里的title来自于文件名。你也可以手动修改。跟博文的一样，除了不包含分类 categories，对于 sharing 和 comments 你可以关闭，对于 footer 你可以删除，这样就不会添加默认的footer信息到该页面；如果你不像要再页面中显示日期，可以删除这里的 date 。</p>

<p>内容</p>

<p>页面和博文会调用markup 引擎渲染，默认引擎是再配置文件中；此外，你可以使用任何Jekyll docs中所介绍的模板特性。</p>

<p>默认首页是显示全文，要想仅仅显示摘要，请在合适的地方插入下面的代码</p>

<p>这个会生成一个”Continue →” 链接来指向完整博文，这个跟wordpress的一样。</p>
]]></content>
  </entry>
  
</feed>
